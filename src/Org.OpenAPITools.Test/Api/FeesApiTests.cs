/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing FeesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FeesApiTests
    {
        private FeesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FeesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FeesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' FeesApi
            //Assert.IsInstanceOf(typeof(FeesApi), instance);
        }

        
        /// <summary>
        /// Test FindAllFees
        /// </summary>
        [Test]
        public void FindAllFeesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //string externalCustomerId = null;
            //string externalSubscriptionId = null;
            //string currency = null;
            //string feeType = null;
            //string billableMetricCode = null;
            //string paymentStatus = null;
            //DateTime? createdAtFrom = null;
            //DateTime? createdAtTo = null;
            //DateTime? succeededAtFrom = null;
            //DateTime? succeededAtTo = null;
            //DateTime? failedAtFrom = null;
            //DateTime? failedAtTo = null;
            //DateTime? refundedAtFrom = null;
            //DateTime? refundedAtTo = null;
            //var response = instance.FindAllFees(page, perPage, externalCustomerId, externalSubscriptionId, currency, feeType, billableMetricCode, paymentStatus, createdAtFrom, createdAtTo, succeededAtFrom, succeededAtTo, failedAtFrom, failedAtTo, refundedAtFrom, refundedAtTo);
            //Assert.IsInstanceOf(typeof(FeesPaginated), response, "response is FeesPaginated");
        }
        
        /// <summary>
        /// Test FindFee
        /// </summary>
        [Test]
        public void FindFeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //var response = instance.FindFee(id);
            //Assert.IsInstanceOf(typeof(FeeObject), response, "response is FeeObject");
        }
        
        /// <summary>
        /// Test UpdateFee
        /// </summary>
        [Test]
        public void UpdateFeeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid id = null;
            //FeeUpdateInput feeUpdateInput = null;
            //var response = instance.UpdateFee(id, feeUpdateInput);
            //Assert.IsInstanceOf(typeof(FeeObject), response, "response is FeeObject");
        }
        
    }

}
