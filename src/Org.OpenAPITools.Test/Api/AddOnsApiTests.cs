/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing AddOnsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AddOnsApiTests
    {
        private AddOnsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AddOnsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AddOnsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AddOnsApi
            //Assert.IsInstanceOf(typeof(AddOnsApi), instance);
        }

        
        /// <summary>
        /// Test ApplyAddOn
        /// </summary>
        [Test]
        public void ApplyAddOnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AppliedAddOnInput appliedAddOnInput = null;
            //var response = instance.ApplyAddOn(appliedAddOnInput);
            //Assert.IsInstanceOf(typeof(AppliedAddOn), response, "response is AppliedAddOn");
        }
        
        /// <summary>
        /// Test CreateAddOn
        /// </summary>
        [Test]
        public void CreateAddOnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddOnInput addOnInput = null;
            //var response = instance.CreateAddOn(addOnInput);
            //Assert.IsInstanceOf(typeof(AddOn), response, "response is AddOn");
        }
        
        /// <summary>
        /// Test DestroyAddOn
        /// </summary>
        [Test]
        public void DestroyAddOnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //var response = instance.DestroyAddOn(code);
            //Assert.IsInstanceOf(typeof(AddOn), response, "response is AddOn");
        }
        
        /// <summary>
        /// Test FindAddOn
        /// </summary>
        [Test]
        public void FindAddOnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //var response = instance.FindAddOn(code);
            //Assert.IsInstanceOf(typeof(AddOn), response, "response is AddOn");
        }
        
        /// <summary>
        /// Test FindAllAddOns
        /// </summary>
        [Test]
        public void FindAllAddOnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? perPage = null;
            //var response = instance.FindAllAddOns(page, perPage);
            //Assert.IsInstanceOf(typeof(AddOns), response, "response is AddOns");
        }
        
        /// <summary>
        /// Test UpdateAddOn
        /// </summary>
        [Test]
        public void UpdateAddOnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //AddOnInput addOnInput = null;
            //var response = instance.UpdateAddOn(code, addOnInput);
            //Assert.IsInstanceOf(typeof(AddOn), response, "response is AddOn");
        }
        
    }

}
