/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.20.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddOnsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Apply an add-on to a customer
        /// </summary>
        /// <remarks>
        /// Apply an add-on to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedAddOnInput">Apply add-on payload</param>
        /// <returns>AppliedAddOn</returns>
        AppliedAddOn ApplyAddOn (AppliedAddOnInput appliedAddOnInput);

        /// <summary>
        /// Apply an add-on to a customer
        /// </summary>
        /// <remarks>
        /// Apply an add-on to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedAddOnInput">Apply add-on payload</param>
        /// <returns>ApiResponse of AppliedAddOn</returns>
        ApiResponse<AppliedAddOn> ApplyAddOnWithHttpInfo (AppliedAddOnInput appliedAddOnInput);
        /// <summary>
        /// Create a new add-on
        /// </summary>
        /// <remarks>
        /// Create a new add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOnInput">Add-on payload</param>
        /// <returns>AddOn</returns>
        AddOn CreateAddOn (AddOnInput addOnInput);

        /// <summary>
        /// Create a new add-on
        /// </summary>
        /// <remarks>
        /// Create a new add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOnInput">Add-on payload</param>
        /// <returns>ApiResponse of AddOn</returns>
        ApiResponse<AddOn> CreateAddOnWithHttpInfo (AddOnInput addOnInput);
        /// <summary>
        /// Delete an add-on
        /// </summary>
        /// <remarks>
        /// Delete an add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <returns>AddOn</returns>
        AddOn DestroyAddOn (string code);

        /// <summary>
        /// Delete an add-on
        /// </summary>
        /// <remarks>
        /// Delete an add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <returns>ApiResponse of AddOn</returns>
        ApiResponse<AddOn> DestroyAddOnWithHttpInfo (string code);
        /// <summary>
        /// Find add-on by code
        /// </summary>
        /// <remarks>
        /// Return a single add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <returns>AddOn</returns>
        AddOn FindAddOn (string code);

        /// <summary>
        /// Find add-on by code
        /// </summary>
        /// <remarks>
        /// Return a single add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <returns>ApiResponse of AddOn</returns>
        ApiResponse<AddOn> FindAddOnWithHttpInfo (string code);
        /// <summary>
        /// Find add-ons
        /// </summary>
        /// <remarks>
        /// Find all add-ons in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>AddOns</returns>
        AddOns FindAllAddOns (int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Find add-ons
        /// </summary>
        /// <remarks>
        /// Find all add-ons in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of AddOns</returns>
        ApiResponse<AddOns> FindAllAddOnsWithHttpInfo (int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Update an existing add-on
        /// </summary>
        /// <remarks>
        /// Update an existing add-on by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="addOnInput">Update an existing add-on</param>
        /// <returns>AddOn</returns>
        AddOn UpdateAddOn (string code, AddOnInput addOnInput);

        /// <summary>
        /// Update an existing add-on
        /// </summary>
        /// <remarks>
        /// Update an existing add-on by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="addOnInput">Update an existing add-on</param>
        /// <returns>ApiResponse of AddOn</returns>
        ApiResponse<AddOn> UpdateAddOnWithHttpInfo (string code, AddOnInput addOnInput);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Apply an add-on to a customer
        /// </summary>
        /// <remarks>
        /// Apply an add-on to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedAddOnInput">Apply add-on payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AppliedAddOn</returns>
        System.Threading.Tasks.Task<AppliedAddOn> ApplyAddOnAsync (AppliedAddOnInput appliedAddOnInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Apply an add-on to a customer
        /// </summary>
        /// <remarks>
        /// Apply an add-on to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedAddOnInput">Apply add-on payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AppliedAddOn)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppliedAddOn>> ApplyAddOnWithHttpInfoAsync (AppliedAddOnInput appliedAddOnInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new add-on
        /// </summary>
        /// <remarks>
        /// Create a new add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOnInput">Add-on payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOn</returns>
        System.Threading.Tasks.Task<AddOn> CreateAddOnAsync (AddOnInput addOnInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new add-on
        /// </summary>
        /// <remarks>
        /// Create a new add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOnInput">Add-on payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOn)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOn>> CreateAddOnWithHttpInfoAsync (AddOnInput addOnInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an add-on
        /// </summary>
        /// <remarks>
        /// Delete an add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOn</returns>
        System.Threading.Tasks.Task<AddOn> DestroyAddOnAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an add-on
        /// </summary>
        /// <remarks>
        /// Delete an add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOn)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOn>> DestroyAddOnWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find add-on by code
        /// </summary>
        /// <remarks>
        /// Return a single add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOn</returns>
        System.Threading.Tasks.Task<AddOn> FindAddOnAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find add-on by code
        /// </summary>
        /// <remarks>
        /// Return a single add-on
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOn)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOn>> FindAddOnWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find add-ons
        /// </summary>
        /// <remarks>
        /// Find all add-ons in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOns</returns>
        System.Threading.Tasks.Task<AddOns> FindAllAddOnsAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find add-ons
        /// </summary>
        /// <remarks>
        /// Find all add-ons in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOns)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOns>> FindAllAddOnsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing add-on
        /// </summary>
        /// <remarks>
        /// Update an existing add-on by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="addOnInput">Update an existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOn</returns>
        System.Threading.Tasks.Task<AddOn> UpdateAddOnAsync (string code, AddOnInput addOnInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing add-on
        /// </summary>
        /// <remarks>
        /// Update an existing add-on by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="addOnInput">Update an existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOn)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOn>> UpdateAddOnWithHttpInfoAsync (string code, AddOnInput addOnInput, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddOnsApi : IAddOnsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddOnsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddOnsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddOnsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AddOnsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddOnsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddOnsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Apply an add-on to a customer Apply an add-on to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedAddOnInput">Apply add-on payload</param>
        /// <returns>AppliedAddOn</returns>
        public AppliedAddOn ApplyAddOn (AppliedAddOnInput appliedAddOnInput)
        {
             ApiResponse<AppliedAddOn> localVarResponse = ApplyAddOnWithHttpInfo(appliedAddOnInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an add-on to a customer Apply an add-on to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedAddOnInput">Apply add-on payload</param>
        /// <returns>ApiResponse of AppliedAddOn</returns>
        public ApiResponse<AppliedAddOn> ApplyAddOnWithHttpInfo (AppliedAddOnInput appliedAddOnInput)
        {
            // verify the required parameter 'appliedAddOnInput' is set
            if (appliedAddOnInput == null)
                throw new ApiException(400, "Missing required parameter 'appliedAddOnInput' when calling AddOnsApi->ApplyAddOn");

            var localVarPath = "/applied_add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appliedAddOnInput != null && appliedAddOnInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appliedAddOnInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appliedAddOnInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppliedAddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppliedAddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppliedAddOn)));
        }

        /// <summary>
        /// Apply an add-on to a customer Apply an add-on to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedAddOnInput">Apply add-on payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AppliedAddOn</returns>
        public async System.Threading.Tasks.Task<AppliedAddOn> ApplyAddOnAsync (AppliedAddOnInput appliedAddOnInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AppliedAddOn> localVarResponse = await ApplyAddOnWithHttpInfoAsync(appliedAddOnInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply an add-on to a customer Apply an add-on to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedAddOnInput">Apply add-on payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AppliedAddOn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppliedAddOn>> ApplyAddOnWithHttpInfoAsync (AppliedAddOnInput appliedAddOnInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'appliedAddOnInput' is set
            if (appliedAddOnInput == null)
                throw new ApiException(400, "Missing required parameter 'appliedAddOnInput' when calling AddOnsApi->ApplyAddOn");

            var localVarPath = "/applied_add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appliedAddOnInput != null && appliedAddOnInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appliedAddOnInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appliedAddOnInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppliedAddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppliedAddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppliedAddOn)));
        }

        /// <summary>
        /// Create a new add-on Create a new add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOnInput">Add-on payload</param>
        /// <returns>AddOn</returns>
        public AddOn CreateAddOn (AddOnInput addOnInput)
        {
             ApiResponse<AddOn> localVarResponse = CreateAddOnWithHttpInfo(addOnInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new add-on Create a new add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOnInput">Add-on payload</param>
        /// <returns>ApiResponse of AddOn</returns>
        public ApiResponse<AddOn> CreateAddOnWithHttpInfo (AddOnInput addOnInput)
        {
            // verify the required parameter 'addOnInput' is set
            if (addOnInput == null)
                throw new ApiException(400, "Missing required parameter 'addOnInput' when calling AddOnsApi->CreateAddOn");

            var localVarPath = "/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addOnInput != null && addOnInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addOnInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addOnInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOn)));
        }

        /// <summary>
        /// Create a new add-on Create a new add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOnInput">Add-on payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOn</returns>
        public async System.Threading.Tasks.Task<AddOn> CreateAddOnAsync (AddOnInput addOnInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddOn> localVarResponse = await CreateAddOnWithHttpInfoAsync(addOnInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new add-on Create a new add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOnInput">Add-on payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddOn>> CreateAddOnWithHttpInfoAsync (AddOnInput addOnInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'addOnInput' is set
            if (addOnInput == null)
                throw new ApiException(400, "Missing required parameter 'addOnInput' when calling AddOnsApi->CreateAddOn");

            var localVarPath = "/add_ons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addOnInput != null && addOnInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addOnInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addOnInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOn)));
        }

        /// <summary>
        /// Delete an add-on Delete an add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <returns>AddOn</returns>
        public AddOn DestroyAddOn (string code)
        {
             ApiResponse<AddOn> localVarResponse = DestroyAddOnWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an add-on Delete an add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <returns>ApiResponse of AddOn</returns>
        public ApiResponse<AddOn> DestroyAddOnWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AddOnsApi->DestroyAddOn");

            var localVarPath = "/add_ons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOn)));
        }

        /// <summary>
        /// Delete an add-on Delete an add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOn</returns>
        public async System.Threading.Tasks.Task<AddOn> DestroyAddOnAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddOn> localVarResponse = await DestroyAddOnWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an add-on Delete an add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddOn>> DestroyAddOnWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AddOnsApi->DestroyAddOn");

            var localVarPath = "/add_ons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOn)));
        }

        /// <summary>
        /// Find add-on by code Return a single add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <returns>AddOn</returns>
        public AddOn FindAddOn (string code)
        {
             ApiResponse<AddOn> localVarResponse = FindAddOnWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find add-on by code Return a single add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <returns>ApiResponse of AddOn</returns>
        public ApiResponse<AddOn> FindAddOnWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AddOnsApi->FindAddOn");

            var localVarPath = "/add_ons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOn)));
        }

        /// <summary>
        /// Find add-on by code Return a single add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOn</returns>
        public async System.Threading.Tasks.Task<AddOn> FindAddOnAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddOn> localVarResponse = await FindAddOnWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find add-on by code Return a single add-on
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddOn>> FindAddOnWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AddOnsApi->FindAddOn");

            var localVarPath = "/add_ons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOn)));
        }

        /// <summary>
        /// Find add-ons Find all add-ons in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>AddOns</returns>
        public AddOns FindAllAddOns (int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<AddOns> localVarResponse = FindAllAddOnsWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find add-ons Find all add-ons in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of AddOns</returns>
        public ApiResponse<AddOns> FindAllAddOnsWithHttpInfo (int? page = default(int?), int? perPage = default(int?))
        {

            var localVarPath = "/add_ons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllAddOns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOns) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOns)));
        }

        /// <summary>
        /// Find add-ons Find all add-ons in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOns</returns>
        public async System.Threading.Tasks.Task<AddOns> FindAllAddOnsAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddOns> localVarResponse = await FindAllAddOnsWithHttpInfoAsync(page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find add-ons Find all add-ons in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOns)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddOns>> FindAllAddOnsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/add_ons/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllAddOns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOns) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOns)));
        }

        /// <summary>
        /// Update an existing add-on Update an existing add-on by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="addOnInput">Update an existing add-on</param>
        /// <returns>AddOn</returns>
        public AddOn UpdateAddOn (string code, AddOnInput addOnInput)
        {
             ApiResponse<AddOn> localVarResponse = UpdateAddOnWithHttpInfo(code, addOnInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing add-on Update an existing add-on by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="addOnInput">Update an existing add-on</param>
        /// <returns>ApiResponse of AddOn</returns>
        public ApiResponse<AddOn> UpdateAddOnWithHttpInfo (string code, AddOnInput addOnInput)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AddOnsApi->UpdateAddOn");
            // verify the required parameter 'addOnInput' is set
            if (addOnInput == null)
                throw new ApiException(400, "Missing required parameter 'addOnInput' when calling AddOnsApi->UpdateAddOn");

            var localVarPath = "/add_ons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (addOnInput != null && addOnInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addOnInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addOnInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOn)));
        }

        /// <summary>
        /// Update an existing add-on Update an existing add-on by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="addOnInput">Update an existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddOn</returns>
        public async System.Threading.Tasks.Task<AddOn> UpdateAddOnAsync (string code, AddOnInput addOnInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddOn> localVarResponse = await UpdateAddOnWithHttpInfoAsync(code, addOnInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing add-on Update an existing add-on by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing add-on</param>
        /// <param name="addOnInput">Update an existing add-on</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddOn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddOn>> UpdateAddOnWithHttpInfoAsync (string code, AddOnInput addOnInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling AddOnsApi->UpdateAddOn");
            // verify the required parameter 'addOnInput' is set
            if (addOnInput == null)
                throw new ApiException(400, "Missing required parameter 'addOnInput' when calling AddOnsApi->UpdateAddOn");

            var localVarPath = "/add_ons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (addOnInput != null && addOnInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addOnInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addOnInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAddOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddOn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOn)));
        }

    }
}
