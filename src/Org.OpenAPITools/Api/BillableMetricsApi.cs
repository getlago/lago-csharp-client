/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBillableMetricsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new billable metric
        /// </summary>
        /// <remarks>
        /// Create a new billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billableMetricInput">Billable metric payload</param>
        /// <returns>BillableMetric</returns>
        BillableMetric CreateBillableMetric (BillableMetricInput billableMetricInput);

        /// <summary>
        /// Create a new billable metric
        /// </summary>
        /// <remarks>
        /// Create a new billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billableMetricInput">Billable metric payload</param>
        /// <returns>ApiResponse of BillableMetric</returns>
        ApiResponse<BillableMetric> CreateBillableMetricWithHttpInfo (BillableMetricInput billableMetricInput);
        /// <summary>
        /// Delete a billable metric
        /// </summary>
        /// <remarks>
        /// Delete a billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <returns>BillableMetric</returns>
        BillableMetric DestroyBillableMetric (string code);

        /// <summary>
        /// Delete a billable metric
        /// </summary>
        /// <remarks>
        /// Delete a billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <returns>ApiResponse of BillableMetric</returns>
        ApiResponse<BillableMetric> DestroyBillableMetricWithHttpInfo (string code);
        /// <summary>
        /// Find Billable metric groups
        /// </summary>
        /// <remarks>
        /// Find all billable metric groups in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>Groups</returns>
        Groups FindAllBillableMetricGroups (string code, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Find Billable metric groups
        /// </summary>
        /// <remarks>
        /// Find all billable metric groups in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of Groups</returns>
        ApiResponse<Groups> FindAllBillableMetricGroupsWithHttpInfo (string code, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Find Billable metrics
        /// </summary>
        /// <remarks>
        /// Find all billable metrics in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>BillableMetrics</returns>
        BillableMetrics FindAllBillableMetrics (int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Find Billable metrics
        /// </summary>
        /// <remarks>
        /// Find all billable metrics in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of BillableMetrics</returns>
        ApiResponse<BillableMetrics> FindAllBillableMetricsWithHttpInfo (int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Find billable metric by code
        /// </summary>
        /// <remarks>
        /// Return a single billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <returns>BillableMetric</returns>
        BillableMetric FindBillableMetric (string code);

        /// <summary>
        /// Find billable metric by code
        /// </summary>
        /// <remarks>
        /// Return a single billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <returns>ApiResponse of BillableMetric</returns>
        ApiResponse<BillableMetric> FindBillableMetricWithHttpInfo (string code);
        /// <summary>
        /// Update an existing billable metric
        /// </summary>
        /// <remarks>
        /// Update an existing billable metric by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="billableMetricInput">Update an existing billable metric</param>
        /// <returns>BillableMetric</returns>
        BillableMetric UpdateBillableMetric (string code, BillableMetricInput billableMetricInput);

        /// <summary>
        /// Update an existing billable metric
        /// </summary>
        /// <remarks>
        /// Update an existing billable metric by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="billableMetricInput">Update an existing billable metric</param>
        /// <returns>ApiResponse of BillableMetric</returns>
        ApiResponse<BillableMetric> UpdateBillableMetricWithHttpInfo (string code, BillableMetricInput billableMetricInput);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new billable metric
        /// </summary>
        /// <remarks>
        /// Create a new billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billableMetricInput">Billable metric payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetric</returns>
        System.Threading.Tasks.Task<BillableMetric> CreateBillableMetricAsync (BillableMetricInput billableMetricInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new billable metric
        /// </summary>
        /// <remarks>
        /// Create a new billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billableMetricInput">Billable metric payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetric)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillableMetric>> CreateBillableMetricWithHttpInfoAsync (BillableMetricInput billableMetricInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a billable metric
        /// </summary>
        /// <remarks>
        /// Delete a billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetric</returns>
        System.Threading.Tasks.Task<BillableMetric> DestroyBillableMetricAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a billable metric
        /// </summary>
        /// <remarks>
        /// Delete a billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetric)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillableMetric>> DestroyBillableMetricWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find Billable metric groups
        /// </summary>
        /// <remarks>
        /// Find all billable metric groups in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Groups</returns>
        System.Threading.Tasks.Task<Groups> FindAllBillableMetricGroupsAsync (string code, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find Billable metric groups
        /// </summary>
        /// <remarks>
        /// Find all billable metric groups in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Groups)</returns>
        System.Threading.Tasks.Task<ApiResponse<Groups>> FindAllBillableMetricGroupsWithHttpInfoAsync (string code, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find Billable metrics
        /// </summary>
        /// <remarks>
        /// Find all billable metrics in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetrics</returns>
        System.Threading.Tasks.Task<BillableMetrics> FindAllBillableMetricsAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find Billable metrics
        /// </summary>
        /// <remarks>
        /// Find all billable metrics in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetrics)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillableMetrics>> FindAllBillableMetricsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find billable metric by code
        /// </summary>
        /// <remarks>
        /// Return a single billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetric</returns>
        System.Threading.Tasks.Task<BillableMetric> FindBillableMetricAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find billable metric by code
        /// </summary>
        /// <remarks>
        /// Return a single billable metric
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetric)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillableMetric>> FindBillableMetricWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing billable metric
        /// </summary>
        /// <remarks>
        /// Update an existing billable metric by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="billableMetricInput">Update an existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetric</returns>
        System.Threading.Tasks.Task<BillableMetric> UpdateBillableMetricAsync (string code, BillableMetricInput billableMetricInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing billable metric
        /// </summary>
        /// <remarks>
        /// Update an existing billable metric by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="billableMetricInput">Update an existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetric)</returns>
        System.Threading.Tasks.Task<ApiResponse<BillableMetric>> UpdateBillableMetricWithHttpInfoAsync (string code, BillableMetricInput billableMetricInput, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BillableMetricsApi : IBillableMetricsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BillableMetricsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BillableMetricsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillableMetricsApi"/> class
        /// </summary>
        /// <returns></returns>
        public BillableMetricsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BillableMetricsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BillableMetricsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new billable metric Create a new billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billableMetricInput">Billable metric payload</param>
        /// <returns>BillableMetric</returns>
        public BillableMetric CreateBillableMetric (BillableMetricInput billableMetricInput)
        {
             ApiResponse<BillableMetric> localVarResponse = CreateBillableMetricWithHttpInfo(billableMetricInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new billable metric Create a new billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billableMetricInput">Billable metric payload</param>
        /// <returns>ApiResponse of BillableMetric</returns>
        public ApiResponse<BillableMetric> CreateBillableMetricWithHttpInfo (BillableMetricInput billableMetricInput)
        {
            // verify the required parameter 'billableMetricInput' is set
            if (billableMetricInput == null)
                throw new ApiException(400, "Missing required parameter 'billableMetricInput' when calling BillableMetricsApi->CreateBillableMetric");

            var localVarPath = "/billable_metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billableMetricInput != null && billableMetricInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billableMetricInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billableMetricInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBillableMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetric) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetric)));
        }

        /// <summary>
        /// Create a new billable metric Create a new billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billableMetricInput">Billable metric payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetric</returns>
        public async System.Threading.Tasks.Task<BillableMetric> CreateBillableMetricAsync (BillableMetricInput billableMetricInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BillableMetric> localVarResponse = await CreateBillableMetricWithHttpInfoAsync(billableMetricInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new billable metric Create a new billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="billableMetricInput">Billable metric payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetric)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillableMetric>> CreateBillableMetricWithHttpInfoAsync (BillableMetricInput billableMetricInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'billableMetricInput' is set
            if (billableMetricInput == null)
                throw new ApiException(400, "Missing required parameter 'billableMetricInput' when calling BillableMetricsApi->CreateBillableMetric");

            var localVarPath = "/billable_metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (billableMetricInput != null && billableMetricInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billableMetricInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billableMetricInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBillableMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetric) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetric)));
        }

        /// <summary>
        /// Delete a billable metric Delete a billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <returns>BillableMetric</returns>
        public BillableMetric DestroyBillableMetric (string code)
        {
             ApiResponse<BillableMetric> localVarResponse = DestroyBillableMetricWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a billable metric Delete a billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <returns>ApiResponse of BillableMetric</returns>
        public ApiResponse<BillableMetric> DestroyBillableMetricWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling BillableMetricsApi->DestroyBillableMetric");

            var localVarPath = "/billable_metrics/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyBillableMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetric) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetric)));
        }

        /// <summary>
        /// Delete a billable metric Delete a billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetric</returns>
        public async System.Threading.Tasks.Task<BillableMetric> DestroyBillableMetricAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BillableMetric> localVarResponse = await DestroyBillableMetricWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a billable metric Delete a billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetric)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillableMetric>> DestroyBillableMetricWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling BillableMetricsApi->DestroyBillableMetric");

            var localVarPath = "/billable_metrics/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyBillableMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetric) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetric)));
        }

        /// <summary>
        /// Find Billable metric groups Find all billable metric groups in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>Groups</returns>
        public Groups FindAllBillableMetricGroups (string code, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<Groups> localVarResponse = FindAllBillableMetricGroupsWithHttpInfo(code, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Billable metric groups Find all billable metric groups in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of Groups</returns>
        public ApiResponse<Groups> FindAllBillableMetricGroupsWithHttpInfo (string code, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling BillableMetricsApi->FindAllBillableMetricGroups");

            var localVarPath = "/billable_metrics/{code}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllBillableMetricGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Groups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Groups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Groups)));
        }

        /// <summary>
        /// Find Billable metric groups Find all billable metric groups in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Groups</returns>
        public async System.Threading.Tasks.Task<Groups> FindAllBillableMetricGroupsAsync (string code, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Groups> localVarResponse = await FindAllBillableMetricGroupsWithHttpInfoAsync(code, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Billable metric groups Find all billable metric groups in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Groups)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Groups>> FindAllBillableMetricGroupsWithHttpInfoAsync (string code, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling BillableMetricsApi->FindAllBillableMetricGroups");

            var localVarPath = "/billable_metrics/{code}/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllBillableMetricGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Groups>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Groups) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Groups)));
        }

        /// <summary>
        /// Find Billable metrics Find all billable metrics in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>BillableMetrics</returns>
        public BillableMetrics FindAllBillableMetrics (int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<BillableMetrics> localVarResponse = FindAllBillableMetricsWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Billable metrics Find all billable metrics in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of BillableMetrics</returns>
        public ApiResponse<BillableMetrics> FindAllBillableMetricsWithHttpInfo (int? page = default(int?), int? perPage = default(int?))
        {

            var localVarPath = "/billable_metrics/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllBillableMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetrics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetrics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetrics)));
        }

        /// <summary>
        /// Find Billable metrics Find all billable metrics in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetrics</returns>
        public async System.Threading.Tasks.Task<BillableMetrics> FindAllBillableMetricsAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BillableMetrics> localVarResponse = await FindAllBillableMetricsWithHttpInfoAsync(page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Billable metrics Find all billable metrics in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetrics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillableMetrics>> FindAllBillableMetricsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/billable_metrics/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllBillableMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetrics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetrics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetrics)));
        }

        /// <summary>
        /// Find billable metric by code Return a single billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <returns>BillableMetric</returns>
        public BillableMetric FindBillableMetric (string code)
        {
             ApiResponse<BillableMetric> localVarResponse = FindBillableMetricWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find billable metric by code Return a single billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <returns>ApiResponse of BillableMetric</returns>
        public ApiResponse<BillableMetric> FindBillableMetricWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling BillableMetricsApi->FindBillableMetric");

            var localVarPath = "/billable_metrics/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindBillableMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetric) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetric)));
        }

        /// <summary>
        /// Find billable metric by code Return a single billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetric</returns>
        public async System.Threading.Tasks.Task<BillableMetric> FindBillableMetricAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BillableMetric> localVarResponse = await FindBillableMetricWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find billable metric by code Return a single billable metric
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetric)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillableMetric>> FindBillableMetricWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling BillableMetricsApi->FindBillableMetric");

            var localVarPath = "/billable_metrics/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindBillableMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetric) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetric)));
        }

        /// <summary>
        /// Update an existing billable metric Update an existing billable metric by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="billableMetricInput">Update an existing billable metric</param>
        /// <returns>BillableMetric</returns>
        public BillableMetric UpdateBillableMetric (string code, BillableMetricInput billableMetricInput)
        {
             ApiResponse<BillableMetric> localVarResponse = UpdateBillableMetricWithHttpInfo(code, billableMetricInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing billable metric Update an existing billable metric by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="billableMetricInput">Update an existing billable metric</param>
        /// <returns>ApiResponse of BillableMetric</returns>
        public ApiResponse<BillableMetric> UpdateBillableMetricWithHttpInfo (string code, BillableMetricInput billableMetricInput)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling BillableMetricsApi->UpdateBillableMetric");
            // verify the required parameter 'billableMetricInput' is set
            if (billableMetricInput == null)
                throw new ApiException(400, "Missing required parameter 'billableMetricInput' when calling BillableMetricsApi->UpdateBillableMetric");

            var localVarPath = "/billable_metrics/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (billableMetricInput != null && billableMetricInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billableMetricInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billableMetricInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBillableMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetric) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetric)));
        }

        /// <summary>
        /// Update an existing billable metric Update an existing billable metric by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="billableMetricInput">Update an existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of BillableMetric</returns>
        public async System.Threading.Tasks.Task<BillableMetric> UpdateBillableMetricAsync (string code, BillableMetricInput billableMetricInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<BillableMetric> localVarResponse = await UpdateBillableMetricWithHttpInfoAsync(code, billableMetricInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing billable metric Update an existing billable metric by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing billable metric</param>
        /// <param name="billableMetricInput">Update an existing billable metric</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (BillableMetric)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BillableMetric>> UpdateBillableMetricWithHttpInfoAsync (string code, BillableMetricInput billableMetricInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling BillableMetricsApi->UpdateBillableMetric");
            // verify the required parameter 'billableMetricInput' is set
            if (billableMetricInput == null)
                throw new ApiException(400, "Missing required parameter 'billableMetricInput' when calling BillableMetricsApi->UpdateBillableMetric");

            var localVarPath = "/billable_metrics/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (billableMetricInput != null && billableMetricInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(billableMetricInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = billableMetricInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBillableMetric", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BillableMetric>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BillableMetric) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BillableMetric)));
        }

    }
}
