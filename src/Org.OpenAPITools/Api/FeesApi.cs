/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.36.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find all fees
        /// </summary>
        /// <remarks>
        /// Find all fees of an organization and filter them
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeesPaginated</returns>
        FeesPaginated FindAllFees(int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Find all fees
        /// </summary>
        /// <remarks>
        /// Find all fees of an organization and filter them
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeesPaginated</returns>
        ApiResponse<FeesPaginated> FindAllFeesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Find fee by ID
        /// </summary>
        /// <remarks>
        /// Return a single fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeeObject</returns>
        FeeObject FindFee(Guid id, int operationIndex = 0);

        /// <summary>
        /// Find fee by ID
        /// </summary>
        /// <remarks>
        /// Return a single fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeeObject</returns>
        ApiResponse<FeeObject> FindFeeWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Update an existing fee
        /// </summary>
        /// <remarks>
        /// Update an existing fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeeObject</returns>
        FeeObject UpdateFee(Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), int operationIndex = 0);

        /// <summary>
        /// Update an existing fee
        /// </summary>
        /// <remarks>
        /// Update an existing fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeeObject</returns>
        ApiResponse<FeeObject> UpdateFeeWithHttpInfo(Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Find all fees
        /// </summary>
        /// <remarks>
        /// Find all fees of an organization and filter them
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeesPaginated</returns>
        System.Threading.Tasks.Task<FeesPaginated> FindAllFeesAsync(int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find all fees
        /// </summary>
        /// <remarks>
        /// Find all fees of an organization and filter them
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeesPaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeesPaginated>> FindAllFeesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find fee by ID
        /// </summary>
        /// <remarks>
        /// Return a single fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeObject</returns>
        System.Threading.Tasks.Task<FeeObject> FindFeeAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find fee by ID
        /// </summary>
        /// <remarks>
        /// Return a single fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeObject>> FindFeeWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an existing fee
        /// </summary>
        /// <remarks>
        /// Update an existing fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeObject</returns>
        System.Threading.Tasks.Task<FeeObject> UpdateFeeAsync(Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an existing fee
        /// </summary>
        /// <remarks>
        /// Update an existing fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeObject>> UpdateFeeWithHttpInfoAsync(Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeesApi : IFeesApiSync, IFeesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeesApi : IFeesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeesApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FeesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Find all fees Find all fees of an organization and filter them
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeesPaginated</returns>
        public FeesPaginated FindAllFees(int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FeesPaginated> localVarResponse = FindAllFeesWithHttpInfo(page, perPage, externalCustomerId, externalSubscriptionId, currency, feeType, billableMetricCode, paymentStatus, createdAtFrom, createdAtTo, succeededAtFrom, succeededAtTo, failedAtFrom, failedAtTo, refundedAtFrom, refundedAtTo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find all fees Find all fees of an organization and filter them
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeesPaginated</returns>
        public Org.OpenAPITools.Client.ApiResponse<FeesPaginated> FindAllFeesWithHttpInfo(int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (externalCustomerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "external_customer_id", externalCustomerId));
            }
            if (externalSubscriptionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "external_subscription_id", externalSubscriptionId));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (feeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fee_type", feeType));
            }
            if (billableMetricCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "billable_metric_code", billableMetricCode));
            }
            if (paymentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "payment_status", paymentStatus));
            }
            if (createdAtFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_at_from", createdAtFrom));
            }
            if (createdAtTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_at_to", createdAtTo));
            }
            if (succeededAtFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "succeeded_at_from", succeededAtFrom));
            }
            if (succeededAtTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "succeeded_at_to", succeededAtTo));
            }
            if (failedAtFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "failed_at_from", failedAtFrom));
            }
            if (failedAtTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "failed_at_to", failedAtTo));
            }
            if (refundedAtFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "refunded_at_from", refundedAtFrom));
            }
            if (refundedAtTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "refunded_at_to", refundedAtTo));
            }

            localVarRequestOptions.Operation = "FeesApi.FindAllFees";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeesPaginated>("/fees", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllFees", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find all fees Find all fees of an organization and filter them
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeesPaginated</returns>
        public async System.Threading.Tasks.Task<FeesPaginated> FindAllFeesAsync(int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FeesPaginated> localVarResponse = await FindAllFeesWithHttpInfoAsync(page, perPage, externalCustomerId, externalSubscriptionId, currency, feeType, billableMetricCode, paymentStatus, createdAtFrom, createdAtTo, succeededAtFrom, succeededAtTo, failedAtFrom, failedAtTo, refundedAtFrom, refundedAtTo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find all fees Find all fees of an organization and filter them
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeesPaginated)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FeesPaginated>> FindAllFeesWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (externalCustomerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "external_customer_id", externalCustomerId));
            }
            if (externalSubscriptionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "external_subscription_id", externalSubscriptionId));
            }
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }
            if (feeType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fee_type", feeType));
            }
            if (billableMetricCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "billable_metric_code", billableMetricCode));
            }
            if (paymentStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "payment_status", paymentStatus));
            }
            if (createdAtFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_at_from", createdAtFrom));
            }
            if (createdAtTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "created_at_to", createdAtTo));
            }
            if (succeededAtFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "succeeded_at_from", succeededAtFrom));
            }
            if (succeededAtTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "succeeded_at_to", succeededAtTo));
            }
            if (failedAtFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "failed_at_from", failedAtFrom));
            }
            if (failedAtTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "failed_at_to", failedAtTo));
            }
            if (refundedAtFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "refunded_at_from", refundedAtFrom));
            }
            if (refundedAtTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "refunded_at_to", refundedAtTo));
            }

            localVarRequestOptions.Operation = "FeesApi.FindAllFees";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeesPaginated>("/fees", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllFees", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find fee by ID Return a single fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeeObject</returns>
        public FeeObject FindFee(Guid id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FeeObject> localVarResponse = FindFeeWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find fee by ID Return a single fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeeObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<FeeObject> FindFeeWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FeesApi.FindFee";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FeeObject>("/fees/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFee", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find fee by ID Return a single fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeObject</returns>
        public async System.Threading.Tasks.Task<FeeObject> FindFeeAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FeeObject> localVarResponse = await FindFeeWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find fee by ID Return a single fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FeeObject>> FindFeeWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FeesApi.FindFee";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FeeObject>("/fees/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFee", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing fee Update an existing fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FeeObject</returns>
        public FeeObject UpdateFee(Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FeeObject> localVarResponse = UpdateFeeWithHttpInfo(id, feeUpdateInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing fee Update an existing fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FeeObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<FeeObject> UpdateFeeWithHttpInfo(Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = feeUpdateInput;

            localVarRequestOptions.Operation = "FeesApi.UpdateFee";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<FeeObject>("/fees/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFee", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an existing fee Update an existing fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FeeObject</returns>
        public async System.Threading.Tasks.Task<FeeObject> UpdateFeeAsync(Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FeeObject> localVarResponse = await UpdateFeeWithHttpInfoAsync(id, feeUpdateInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing fee Update an existing fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FeeObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FeeObject>> UpdateFeeWithHttpInfoAsync(Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = feeUpdateInput;

            localVarRequestOptions.Operation = "FeesApi.UpdateFee";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<FeeObject>("/fees/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFee", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
