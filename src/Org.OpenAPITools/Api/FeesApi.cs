/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find all fees
        /// </summary>
        /// <remarks>
        /// Find all fees of an organization and filter them
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <returns>FeesPaginated</returns>
        FeesPaginated FindAllFees (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?));

        /// <summary>
        /// Find all fees
        /// </summary>
        /// <remarks>
        /// Find all fees of an organization and filter them
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <returns>ApiResponse of FeesPaginated</returns>
        ApiResponse<FeesPaginated> FindAllFeesWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?));
        /// <summary>
        /// Find fee by ID
        /// </summary>
        /// <remarks>
        /// Return a single fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <returns>FeeObject</returns>
        FeeObject FindFee (Guid id);

        /// <summary>
        /// Find fee by ID
        /// </summary>
        /// <remarks>
        /// Return a single fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <returns>ApiResponse of FeeObject</returns>
        ApiResponse<FeeObject> FindFeeWithHttpInfo (Guid id);
        /// <summary>
        /// Update an existing fee
        /// </summary>
        /// <remarks>
        /// Update an existing fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <returns>FeeObject</returns>
        FeeObject UpdateFee (Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput));

        /// <summary>
        /// Update an existing fee
        /// </summary>
        /// <remarks>
        /// Update an existing fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <returns>ApiResponse of FeeObject</returns>
        ApiResponse<FeeObject> UpdateFeeWithHttpInfo (Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find all fees
        /// </summary>
        /// <remarks>
        /// Find all fees of an organization and filter them
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FeesPaginated</returns>
        System.Threading.Tasks.Task<FeesPaginated> FindAllFeesAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find all fees
        /// </summary>
        /// <remarks>
        /// Find all fees of an organization and filter them
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FeesPaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeesPaginated>> FindAllFeesWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find fee by ID
        /// </summary>
        /// <remarks>
        /// Return a single fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FeeObject</returns>
        System.Threading.Tasks.Task<FeeObject> FindFeeAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find fee by ID
        /// </summary>
        /// <remarks>
        /// Return a single fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeObject>> FindFeeWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing fee
        /// </summary>
        /// <remarks>
        /// Update an existing fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FeeObject</returns>
        System.Threading.Tasks.Task<FeeObject> UpdateFeeAsync (Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing fee
        /// </summary>
        /// <remarks>
        /// Update an existing fee
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FeeObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeObject>> UpdateFeeWithHttpInfoAsync (Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeesApi : IFeesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FeesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find all fees Find all fees of an organization and filter them
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <returns>FeesPaginated</returns>
        public FeesPaginated FindAllFees (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?))
        {
             ApiResponse<FeesPaginated> localVarResponse = FindAllFeesWithHttpInfo(page, perPage, externalCustomerId, externalSubscriptionId, currency, feeType, billableMetricCode, paymentStatus, createdAtFrom, createdAtTo, succeededAtFrom, succeededAtTo, failedAtFrom, failedAtTo, refundedAtFrom, refundedAtTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find all fees Find all fees of an organization and filter them
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <returns>ApiResponse of FeesPaginated</returns>
        public ApiResponse<FeesPaginated> FindAllFeesWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?))
        {

            var localVarPath = "/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter
            if (externalSubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_subscription_id", externalSubscriptionId)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (feeType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fee_type", feeType)); // query parameter
            if (billableMetricCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billable_metric_code", billableMetricCode)); // query parameter
            if (paymentStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payment_status", paymentStatus)); // query parameter
            if (createdAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_from", createdAtFrom)); // query parameter
            if (createdAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_to", createdAtTo)); // query parameter
            if (succeededAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "succeeded_at_from", succeededAtFrom)); // query parameter
            if (succeededAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "succeeded_at_to", succeededAtTo)); // query parameter
            if (failedAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failed_at_from", failedAtFrom)); // query parameter
            if (failedAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failed_at_to", failedAtTo)); // query parameter
            if (refundedAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refunded_at_from", refundedAtFrom)); // query parameter
            if (refundedAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refunded_at_to", refundedAtTo)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeesPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeesPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeesPaginated)));
        }

        /// <summary>
        /// Find all fees Find all fees of an organization and filter them
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FeesPaginated</returns>
        public async System.Threading.Tasks.Task<FeesPaginated> FindAllFeesAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FeesPaginated> localVarResponse = await FindAllFeesWithHttpInfoAsync(page, perPage, externalCustomerId, externalSubscriptionId, currency, feeType, billableMetricCode, paymentStatus, createdAtFrom, createdAtTo, succeededAtFrom, succeededAtTo, failedAtFrom, failedAtTo, refundedAtFrom, refundedAtTo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find all fees Find all fees of an organization and filter them
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="externalSubscriptionId">External subscription ID (optional)</param>
        /// <param name="currency">Amount currency (optional)</param>
        /// <param name="feeType">Fee type (optional)</param>
        /// <param name="billableMetricCode">Code of the source billable metric (optional)</param>
        /// <param name="paymentStatus">Payment status (optional)</param>
        /// <param name="createdAtFrom">Creation datetime from (optional)</param>
        /// <param name="createdAtTo">Creation date to (optional)</param>
        /// <param name="succeededAtFrom">Payment succees date from (optional)</param>
        /// <param name="succeededAtTo">Payment succees date to (optional)</param>
        /// <param name="failedAtFrom">Payment failed date from (optional)</param>
        /// <param name="failedAtTo">Payment failed date to (optional)</param>
        /// <param name="refundedAtFrom">Payment refund date from (optional)</param>
        /// <param name="refundedAtTo">Payment refund date to (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FeesPaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeesPaginated>> FindAllFeesWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), string externalSubscriptionId = default(string), string currency = default(string), string feeType = default(string), string billableMetricCode = default(string), string paymentStatus = default(string), DateTime? createdAtFrom = default(DateTime?), DateTime? createdAtTo = default(DateTime?), DateTime? succeededAtFrom = default(DateTime?), DateTime? succeededAtTo = default(DateTime?), DateTime? failedAtFrom = default(DateTime?), DateTime? failedAtTo = default(DateTime?), DateTime? refundedAtFrom = default(DateTime?), DateTime? refundedAtTo = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter
            if (externalSubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_subscription_id", externalSubscriptionId)); // query parameter
            if (currency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency", currency)); // query parameter
            if (feeType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fee_type", feeType)); // query parameter
            if (billableMetricCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "billable_metric_code", billableMetricCode)); // query parameter
            if (paymentStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "payment_status", paymentStatus)); // query parameter
            if (createdAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_from", createdAtFrom)); // query parameter
            if (createdAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_at_to", createdAtTo)); // query parameter
            if (succeededAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "succeeded_at_from", succeededAtFrom)); // query parameter
            if (succeededAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "succeeded_at_to", succeededAtTo)); // query parameter
            if (failedAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failed_at_from", failedAtFrom)); // query parameter
            if (failedAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "failed_at_to", failedAtTo)); // query parameter
            if (refundedAtFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refunded_at_from", refundedAtFrom)); // query parameter
            if (refundedAtTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "refunded_at_to", refundedAtTo)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllFees", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeesPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeesPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeesPaginated)));
        }

        /// <summary>
        /// Find fee by ID Return a single fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <returns>FeeObject</returns>
        public FeeObject FindFee (Guid id)
        {
             ApiResponse<FeeObject> localVarResponse = FindFeeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find fee by ID Return a single fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <returns>ApiResponse of FeeObject</returns>
        public ApiResponse<FeeObject> FindFeeWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FeesApi->FindFee");

            var localVarPath = "/fees/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeeObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeObject)));
        }

        /// <summary>
        /// Find fee by ID Return a single fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FeeObject</returns>
        public async System.Threading.Tasks.Task<FeeObject> FindFeeAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FeeObject> localVarResponse = await FindFeeWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find fee by ID Return a single fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FeeObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeObject>> FindFeeWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FeesApi->FindFee");

            var localVarPath = "/fees/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeeObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeObject)));
        }

        /// <summary>
        /// Update an existing fee Update an existing fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <returns>FeeObject</returns>
        public FeeObject UpdateFee (Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput))
        {
             ApiResponse<FeeObject> localVarResponse = UpdateFeeWithHttpInfo(id, feeUpdateInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing fee Update an existing fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <returns>ApiResponse of FeeObject</returns>
        public ApiResponse<FeeObject> UpdateFeeWithHttpInfo (Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FeesApi->UpdateFee");

            var localVarPath = "/fees/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (feeUpdateInput != null && feeUpdateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feeUpdateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feeUpdateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeeObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeObject)));
        }

        /// <summary>
        /// Update an existing fee Update an existing fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of FeeObject</returns>
        public async System.Threading.Tasks.Task<FeeObject> UpdateFeeAsync (Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<FeeObject> localVarResponse = await UpdateFeeWithHttpInfoAsync(id, feeUpdateInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing fee Update an existing fee
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Fee</param>
        /// <param name="feeUpdateInput">Payload to update a fee (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (FeeObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeObject>> UpdateFeeWithHttpInfoAsync (Guid id, FeeUpdateInput feeUpdateInput = default(FeeUpdateInput), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FeesApi->UpdateFee");

            var localVarPath = "/fees/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (feeUpdateInput != null && feeUpdateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feeUpdateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feeUpdateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeeObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeObject)));
        }

    }
}
