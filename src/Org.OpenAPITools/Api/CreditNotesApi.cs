/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICreditNotesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Credit note
        /// </summary>
        /// <remarks>
        /// Create a new credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNoteInput">Credit note payload</param>
        /// <returns>CreditNote</returns>
        CreditNote CreateCreditNote (CreditNoteInput creditNoteInput);

        /// <summary>
        /// Create a new Credit note
        /// </summary>
        /// <remarks>
        /// Create a new credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNoteInput">Credit note payload</param>
        /// <returns>ApiResponse of CreditNote</returns>
        ApiResponse<CreditNote> CreateCreditNoteWithHttpInfo (CreditNoteInput creditNoteInput);
        /// <summary>
        /// Download an existing credit note
        /// </summary>
        /// <remarks>
        /// Download an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <returns>CreditNote</returns>
        CreditNote DownloadCreditNote (string id);

        /// <summary>
        /// Download an existing credit note
        /// </summary>
        /// <remarks>
        /// Download an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <returns>ApiResponse of CreditNote</returns>
        ApiResponse<CreditNote> DownloadCreditNoteWithHttpInfo (string id);
        /// <summary>
        /// Find Credit notes
        /// </summary>
        /// <remarks>
        /// Find all credit notes in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <returns>CreditNotes</returns>
        CreditNotes FindAllCreditNotes (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string));

        /// <summary>
        /// Find Credit notes
        /// </summary>
        /// <remarks>
        /// Find all credit notes in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        ApiResponse<CreditNotes> FindAllCreditNotesWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string));
        /// <summary>
        /// Find credit note
        /// </summary>
        /// <remarks>
        /// Return a single credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <returns>CreditNote</returns>
        CreditNote FindCreditNote (string id);

        /// <summary>
        /// Find credit note
        /// </summary>
        /// <remarks>
        /// Return a single credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <returns>ApiResponse of CreditNote</returns>
        ApiResponse<CreditNote> FindCreditNoteWithHttpInfo (string id);
        /// <summary>
        /// Update an existing credit note
        /// </summary>
        /// <remarks>
        /// Update an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="creditNoteUpdateInput">Update an existing credit note</param>
        /// <returns>CreditNote</returns>
        CreditNote UpdateCreditNote (string id, CreditNoteUpdateInput creditNoteUpdateInput);

        /// <summary>
        /// Update an existing credit note
        /// </summary>
        /// <remarks>
        /// Update an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="creditNoteUpdateInput">Update an existing credit note</param>
        /// <returns>ApiResponse of CreditNote</returns>
        ApiResponse<CreditNote> UpdateCreditNoteWithHttpInfo (string id, CreditNoteUpdateInput creditNoteUpdateInput);
        /// <summary>
        /// Void existing credit note
        /// </summary>
        /// <remarks>
        /// Void an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <returns>CreditNote</returns>
        CreditNote VoidCreditNote (string id);

        /// <summary>
        /// Void existing credit note
        /// </summary>
        /// <remarks>
        /// Void an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <returns>ApiResponse of CreditNote</returns>
        ApiResponse<CreditNote> VoidCreditNoteWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Credit note
        /// </summary>
        /// <remarks>
        /// Create a new credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNoteInput">Credit note payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        System.Threading.Tasks.Task<CreditNote> CreateCreditNoteAsync (CreditNoteInput creditNoteInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Credit note
        /// </summary>
        /// <remarks>
        /// Create a new credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNoteInput">Credit note payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNote>> CreateCreditNoteWithHttpInfoAsync (CreditNoteInput creditNoteInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Download an existing credit note
        /// </summary>
        /// <remarks>
        /// Download an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        System.Threading.Tasks.Task<CreditNote> DownloadCreditNoteAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download an existing credit note
        /// </summary>
        /// <remarks>
        /// Download an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNote>> DownloadCreditNoteWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find Credit notes
        /// </summary>
        /// <remarks>
        /// Find all credit notes in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNotes</returns>
        System.Threading.Tasks.Task<CreditNotes> FindAllCreditNotesAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find Credit notes
        /// </summary>
        /// <remarks>
        /// Find all credit notes in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNotes>> FindAllCreditNotesWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find credit note
        /// </summary>
        /// <remarks>
        /// Return a single credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        System.Threading.Tasks.Task<CreditNote> FindCreditNoteAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find credit note
        /// </summary>
        /// <remarks>
        /// Return a single credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNote>> FindCreditNoteWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing credit note
        /// </summary>
        /// <remarks>
        /// Update an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="creditNoteUpdateInput">Update an existing credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        System.Threading.Tasks.Task<CreditNote> UpdateCreditNoteAsync (string id, CreditNoteUpdateInput creditNoteUpdateInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing credit note
        /// </summary>
        /// <remarks>
        /// Update an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="creditNoteUpdateInput">Update an existing credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNote>> UpdateCreditNoteWithHttpInfoAsync (string id, CreditNoteUpdateInput creditNoteUpdateInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Void existing credit note
        /// </summary>
        /// <remarks>
        /// Void an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        System.Threading.Tasks.Task<CreditNote> VoidCreditNoteAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Void existing credit note
        /// </summary>
        /// <remarks>
        /// Void an existing credit note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditNote>> VoidCreditNoteWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CreditNotesApi : ICreditNotesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNotesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CreditNotesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNotesApi"/> class
        /// </summary>
        /// <returns></returns>
        public CreditNotesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNotesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CreditNotesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Credit note Create a new credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNoteInput">Credit note payload</param>
        /// <returns>CreditNote</returns>
        public CreditNote CreateCreditNote (CreditNoteInput creditNoteInput)
        {
             ApiResponse<CreditNote> localVarResponse = CreateCreditNoteWithHttpInfo(creditNoteInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Credit note Create a new credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNoteInput">Credit note payload</param>
        /// <returns>ApiResponse of CreditNote</returns>
        public ApiResponse<CreditNote> CreateCreditNoteWithHttpInfo (CreditNoteInput creditNoteInput)
        {
            // verify the required parameter 'creditNoteInput' is set
            if (creditNoteInput == null)
                throw new ApiException(400, "Missing required parameter 'creditNoteInput' when calling CreditNotesApi->CreateCreditNote");

            var localVarPath = "/credit_notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creditNoteInput != null && creditNoteInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creditNoteInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creditNoteInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Create a new Credit note Create a new credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNoteInput">Credit note payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        public async System.Threading.Tasks.Task<CreditNote> CreateCreditNoteAsync (CreditNoteInput creditNoteInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreditNote> localVarResponse = await CreateCreditNoteWithHttpInfoAsync(creditNoteInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Credit note Create a new credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditNoteInput">Credit note payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditNote>> CreateCreditNoteWithHttpInfoAsync (CreditNoteInput creditNoteInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'creditNoteInput' is set
            if (creditNoteInput == null)
                throw new ApiException(400, "Missing required parameter 'creditNoteInput' when calling CreditNotesApi->CreateCreditNote");

            var localVarPath = "/credit_notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creditNoteInput != null && creditNoteInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creditNoteInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creditNoteInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Download an existing credit note Download an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <returns>CreditNote</returns>
        public CreditNote DownloadCreditNote (string id)
        {
             ApiResponse<CreditNote> localVarResponse = DownloadCreditNoteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download an existing credit note Download an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <returns>ApiResponse of CreditNote</returns>
        public ApiResponse<CreditNote> DownloadCreditNoteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CreditNotesApi->DownloadCreditNote");

            var localVarPath = "/credit_notes/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Download an existing credit note Download an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        public async System.Threading.Tasks.Task<CreditNote> DownloadCreditNoteAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreditNote> localVarResponse = await DownloadCreditNoteWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download an existing credit note Download an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditNote>> DownloadCreditNoteWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CreditNotesApi->DownloadCreditNote");

            var localVarPath = "/credit_notes/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Find Credit notes Find all credit notes in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <returns>CreditNotes</returns>
        public CreditNotes FindAllCreditNotes (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string))
        {
             ApiResponse<CreditNotes> localVarResponse = FindAllCreditNotesWithHttpInfo(page, perPage, externalCustomerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Credit notes Find all credit notes in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <returns>ApiResponse of CreditNotes</returns>
        public ApiResponse<CreditNotes> FindAllCreditNotesWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string))
        {

            var localVarPath = "/credit_notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllCreditNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNotes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNotes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNotes)));
        }

        /// <summary>
        /// Find Credit notes Find all credit notes in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNotes</returns>
        public async System.Threading.Tasks.Task<CreditNotes> FindAllCreditNotesAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreditNotes> localVarResponse = await FindAllCreditNotesWithHttpInfoAsync(page, perPage, externalCustomerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Credit notes Find all credit notes in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNotes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditNotes>> FindAllCreditNotesWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/credit_notes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllCreditNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNotes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNotes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNotes)));
        }

        /// <summary>
        /// Find credit note Return a single credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <returns>CreditNote</returns>
        public CreditNote FindCreditNote (string id)
        {
             ApiResponse<CreditNote> localVarResponse = FindCreditNoteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find credit note Return a single credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <returns>ApiResponse of CreditNote</returns>
        public ApiResponse<CreditNote> FindCreditNoteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CreditNotesApi->FindCreditNote");

            var localVarPath = "/credit_notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Find credit note Return a single credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        public async System.Threading.Tasks.Task<CreditNote> FindCreditNoteAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreditNote> localVarResponse = await FindCreditNoteWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find credit note Return a single credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditNote>> FindCreditNoteWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CreditNotesApi->FindCreditNote");

            var localVarPath = "/credit_notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Update an existing credit note Update an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="creditNoteUpdateInput">Update an existing credit note</param>
        /// <returns>CreditNote</returns>
        public CreditNote UpdateCreditNote (string id, CreditNoteUpdateInput creditNoteUpdateInput)
        {
             ApiResponse<CreditNote> localVarResponse = UpdateCreditNoteWithHttpInfo(id, creditNoteUpdateInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing credit note Update an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="creditNoteUpdateInput">Update an existing credit note</param>
        /// <returns>ApiResponse of CreditNote</returns>
        public ApiResponse<CreditNote> UpdateCreditNoteWithHttpInfo (string id, CreditNoteUpdateInput creditNoteUpdateInput)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CreditNotesApi->UpdateCreditNote");
            // verify the required parameter 'creditNoteUpdateInput' is set
            if (creditNoteUpdateInput == null)
                throw new ApiException(400, "Missing required parameter 'creditNoteUpdateInput' when calling CreditNotesApi->UpdateCreditNote");

            var localVarPath = "/credit_notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (creditNoteUpdateInput != null && creditNoteUpdateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creditNoteUpdateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creditNoteUpdateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Update an existing credit note Update an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="creditNoteUpdateInput">Update an existing credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        public async System.Threading.Tasks.Task<CreditNote> UpdateCreditNoteAsync (string id, CreditNoteUpdateInput creditNoteUpdateInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreditNote> localVarResponse = await UpdateCreditNoteWithHttpInfoAsync(id, creditNoteUpdateInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing credit note Update an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the existing credit note</param>
        /// <param name="creditNoteUpdateInput">Update an existing credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditNote>> UpdateCreditNoteWithHttpInfoAsync (string id, CreditNoteUpdateInput creditNoteUpdateInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CreditNotesApi->UpdateCreditNote");
            // verify the required parameter 'creditNoteUpdateInput' is set
            if (creditNoteUpdateInput == null)
                throw new ApiException(400, "Missing required parameter 'creditNoteUpdateInput' when calling CreditNotesApi->UpdateCreditNote");

            var localVarPath = "/credit_notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (creditNoteUpdateInput != null && creditNoteUpdateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creditNoteUpdateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creditNoteUpdateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Void existing credit note Void an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <returns>CreditNote</returns>
        public CreditNote VoidCreditNote (string id)
        {
             ApiResponse<CreditNote> localVarResponse = VoidCreditNoteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Void existing credit note Void an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <returns>ApiResponse of CreditNote</returns>
        public ApiResponse<CreditNote> VoidCreditNoteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CreditNotesApi->VoidCreditNote");

            var localVarPath = "/credit_notes/{id}/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VoidCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

        /// <summary>
        /// Void existing credit note Void an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreditNote</returns>
        public async System.Threading.Tasks.Task<CreditNote> VoidCreditNoteAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreditNote> localVarResponse = await VoidCreditNoteWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Void existing credit note Void an existing credit note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Credit note</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreditNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditNote>> VoidCreditNoteWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CreditNotesApi->VoidCreditNote");

            var localVarPath = "/credit_notes/{id}/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VoidCreditNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreditNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditNote)));
        }

    }
}
