/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.36.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a customer
        /// </summary>
        /// <remarks>
        /// Create a new customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        Customer CreateCustomer(CustomerInput customerInput, int operationIndex = 0);

        /// <summary>
        /// Create a customer
        /// </summary>
        /// <remarks>
        /// Create a new customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CreateCustomerWithHttpInfo(CustomerInput customerInput, int operationIndex = 0);
        /// <summary>
        /// Delete customer&#39;s appplied coupon
        /// </summary>
        /// <remarks>
        /// Delete customer&#39;s appplied coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppliedCoupon</returns>
        AppliedCoupon DeleteAppliedCoupon(string customerExternalId, string appliedCouponId, int operationIndex = 0);

        /// <summary>
        /// Delete customer&#39;s appplied coupon
        /// </summary>
        /// <remarks>
        /// Delete customer&#39;s appplied coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppliedCoupon</returns>
        ApiResponse<AppliedCoupon> DeleteAppliedCouponWithHttpInfo(string customerExternalId, string appliedCouponId, int operationIndex = 0);
        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Return the deleted customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        Customer DestroyCustomer(string externalId, int operationIndex = 0);

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Return the deleted customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> DestroyCustomerWithHttpInfo(string externalId, int operationIndex = 0);
        /// <summary>
        /// Find customers
        /// </summary>
        /// <remarks>
        /// Find all customers in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersPaginated</returns>
        CustomersPaginated FindAllCustomers(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Find customers
        /// </summary>
        /// <remarks>
        /// Find all customers in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersPaginated</returns>
        ApiResponse<CustomersPaginated> FindAllCustomersWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Find customer by external ID
        /// </summary>
        /// <remarks>
        /// Return a single customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        Customer FindCustomer(string externalId, int operationIndex = 0);

        /// <summary>
        /// Find customer by external ID
        /// </summary>
        /// <remarks>
        /// Return a single customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> FindCustomerWithHttpInfo(string externalId, int operationIndex = 0);
        /// <summary>
        /// Find customer current usage
        /// </summary>
        /// <remarks>
        /// Return a customer current usage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerUsage</returns>
        CustomerUsage FindCustomerCurrentUsage(string customerExternalId, string externalSubscriptionId, int operationIndex = 0);

        /// <summary>
        /// Find customer current usage
        /// </summary>
        /// <remarks>
        /// Return a customer current usage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerUsage</returns>
        ApiResponse<CustomerUsage> FindCustomerCurrentUsageWithHttpInfo(string customerExternalId, string externalSubscriptionId, int operationIndex = 0);
        /// <summary>
        /// Get customer portal URL
        /// </summary>
        /// <remarks>
        /// Get customer portal URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCustomerPortalUrl200Response</returns>
        GetCustomerPortalUrl200Response GetCustomerPortalUrl(string customerExternalId, int operationIndex = 0);

        /// <summary>
        /// Get customer portal URL
        /// </summary>
        /// <remarks>
        /// Get customer portal URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCustomerPortalUrl200Response</returns>
        ApiResponse<GetCustomerPortalUrl200Response> GetCustomerPortalUrlWithHttpInfo(string customerExternalId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a customer
        /// </summary>
        /// <remarks>
        /// Create a new customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CreateCustomerAsync(CustomerInput customerInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a customer
        /// </summary>
        /// <remarks>
        /// Create a new customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerWithHttpInfoAsync(CustomerInput customerInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete customer&#39;s appplied coupon
        /// </summary>
        /// <remarks>
        /// Delete customer&#39;s appplied coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppliedCoupon</returns>
        System.Threading.Tasks.Task<AppliedCoupon> DeleteAppliedCouponAsync(string customerExternalId, string appliedCouponId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete customer&#39;s appplied coupon
        /// </summary>
        /// <remarks>
        /// Delete customer&#39;s appplied coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppliedCoupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppliedCoupon>> DeleteAppliedCouponWithHttpInfoAsync(string customerExternalId, string appliedCouponId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Return the deleted customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> DestroyCustomerAsync(string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Return the deleted customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> DestroyCustomerWithHttpInfoAsync(string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find customers
        /// </summary>
        /// <remarks>
        /// Find all customers in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersPaginated</returns>
        System.Threading.Tasks.Task<CustomersPaginated> FindAllCustomersAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find customers
        /// </summary>
        /// <remarks>
        /// Find all customers in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersPaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersPaginated>> FindAllCustomersWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find customer by external ID
        /// </summary>
        /// <remarks>
        /// Return a single customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> FindCustomerAsync(string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find customer by external ID
        /// </summary>
        /// <remarks>
        /// Return a single customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> FindCustomerWithHttpInfoAsync(string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find customer current usage
        /// </summary>
        /// <remarks>
        /// Return a customer current usage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerUsage</returns>
        System.Threading.Tasks.Task<CustomerUsage> FindCustomerCurrentUsageAsync(string customerExternalId, string externalSubscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find customer current usage
        /// </summary>
        /// <remarks>
        /// Return a customer current usage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerUsage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerUsage>> FindCustomerCurrentUsageWithHttpInfoAsync(string customerExternalId, string externalSubscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get customer portal URL
        /// </summary>
        /// <remarks>
        /// Get customer portal URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomerPortalUrl200Response</returns>
        System.Threading.Tasks.Task<GetCustomerPortalUrl200Response> GetCustomerPortalUrlAsync(string customerExternalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get customer portal URL
        /// </summary>
        /// <remarks>
        /// Get customer portal URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomerPortalUrl200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomerPortalUrl200Response>> GetCustomerPortalUrlWithHttpInfoAsync(string customerExternalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApi : ICustomersApiSync, ICustomersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomersApi : ICustomersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomersApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomersApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a customer Create a new customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        public Customer CreateCustomer(CustomerInput customerInput, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Customer> localVarResponse = CreateCustomerWithHttpInfo(customerInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a customer Create a new customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        public Org.OpenAPITools.Client.ApiResponse<Customer> CreateCustomerWithHttpInfo(CustomerInput customerInput, int operationIndex = 0)
        {
            // verify the required parameter 'customerInput' is set
            if (customerInput == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerInput' when calling CustomersApi->CreateCustomer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customerInput;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Customer>("/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a customer Create a new customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CreateCustomerAsync(CustomerInput customerInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Customer> localVarResponse = await CreateCustomerWithHttpInfoAsync(customerInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a customer Create a new customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Customer>> CreateCustomerWithHttpInfoAsync(CustomerInput customerInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerInput' is set
            if (customerInput == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerInput' when calling CustomersApi->CreateCustomer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customerInput;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Customer>("/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete customer&#39;s appplied coupon Delete customer&#39;s appplied coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AppliedCoupon</returns>
        public AppliedCoupon DeleteAppliedCoupon(string customerExternalId, string appliedCouponId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AppliedCoupon> localVarResponse = DeleteAppliedCouponWithHttpInfo(customerExternalId, appliedCouponId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete customer&#39;s appplied coupon Delete customer&#39;s appplied coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AppliedCoupon</returns>
        public Org.OpenAPITools.Client.ApiResponse<AppliedCoupon> DeleteAppliedCouponWithHttpInfo(string customerExternalId, string appliedCouponId, int operationIndex = 0)
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->DeleteAppliedCoupon");
            }

            // verify the required parameter 'appliedCouponId' is set
            if (appliedCouponId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'appliedCouponId' when calling CustomersApi->DeleteAppliedCoupon");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(customerExternalId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applied_coupon_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(appliedCouponId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.DeleteAppliedCoupon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AppliedCoupon>("/customers/{customer_external_id}/applied_coupons/{applied_coupon_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAppliedCoupon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete customer&#39;s appplied coupon Delete customer&#39;s appplied coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppliedCoupon</returns>
        public async System.Threading.Tasks.Task<AppliedCoupon> DeleteAppliedCouponAsync(string customerExternalId, string appliedCouponId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AppliedCoupon> localVarResponse = await DeleteAppliedCouponWithHttpInfoAsync(customerExternalId, appliedCouponId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete customer&#39;s appplied coupon Delete customer&#39;s appplied coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppliedCoupon)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AppliedCoupon>> DeleteAppliedCouponWithHttpInfoAsync(string customerExternalId, string appliedCouponId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->DeleteAppliedCoupon");
            }

            // verify the required parameter 'appliedCouponId' is set
            if (appliedCouponId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'appliedCouponId' when calling CustomersApi->DeleteAppliedCoupon");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(customerExternalId)); // path parameter
            localVarRequestOptions.PathParameters.Add("applied_coupon_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(appliedCouponId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.DeleteAppliedCoupon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AppliedCoupon>("/customers/{customer_external_id}/applied_coupons/{applied_coupon_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAppliedCoupon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a customer Return the deleted customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        public Customer DestroyCustomer(string externalId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Customer> localVarResponse = DestroyCustomerWithHttpInfo(externalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a customer Return the deleted customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        public Org.OpenAPITools.Client.ApiResponse<Customer> DestroyCustomerWithHttpInfo(string externalId, int operationIndex = 0)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'externalId' when calling CustomersApi->DestroyCustomer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(externalId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.DestroyCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Customer>("/customers/{external_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a customer Return the deleted customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> DestroyCustomerAsync(string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Customer> localVarResponse = await DestroyCustomerWithHttpInfoAsync(externalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a customer Return the deleted customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Customer>> DestroyCustomerWithHttpInfoAsync(string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'externalId' when calling CustomersApi->DestroyCustomer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(externalId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.DestroyCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Customer>("/customers/{external_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find customers Find all customers in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersPaginated</returns>
        public CustomersPaginated FindAllCustomers(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomersPaginated> localVarResponse = FindAllCustomersWithHttpInfo(page, perPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find customers Find all customers in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersPaginated</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomersPaginated> FindAllCustomersWithHttpInfo(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "CustomersApi.FindAllCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomersPaginated>("/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find customers Find all customers in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersPaginated</returns>
        public async System.Threading.Tasks.Task<CustomersPaginated> FindAllCustomersAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomersPaginated> localVarResponse = await FindAllCustomersWithHttpInfoAsync(page, perPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find customers Find all customers in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersPaginated)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomersPaginated>> FindAllCustomersWithHttpInfoAsync(int? page = default(int?), int? perPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }

            localVarRequestOptions.Operation = "CustomersApi.FindAllCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomersPaginated>("/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindAllCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find customer by external ID Return a single customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        public Customer FindCustomer(string externalId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Customer> localVarResponse = FindCustomerWithHttpInfo(externalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find customer by external ID Return a single customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        public Org.OpenAPITools.Client.ApiResponse<Customer> FindCustomerWithHttpInfo(string externalId, int operationIndex = 0)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'externalId' when calling CustomersApi->FindCustomer");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(externalId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.FindCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Customer>("/customers/{external_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find customer by external ID Return a single customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> FindCustomerAsync(string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Customer> localVarResponse = await FindCustomerWithHttpInfoAsync(externalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find customer by external ID Return a single customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Customer>> FindCustomerWithHttpInfoAsync(string externalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'externalId' when calling CustomersApi->FindCustomer");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(externalId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.FindCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Customer>("/customers/{external_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find customer current usage Return a customer current usage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerUsage</returns>
        public CustomerUsage FindCustomerCurrentUsage(string customerExternalId, string externalSubscriptionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerUsage> localVarResponse = FindCustomerCurrentUsageWithHttpInfo(customerExternalId, externalSubscriptionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find customer current usage Return a customer current usage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerUsage</returns>
        public Org.OpenAPITools.Client.ApiResponse<CustomerUsage> FindCustomerCurrentUsageWithHttpInfo(string customerExternalId, string externalSubscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->FindCustomerCurrentUsage");
            }

            // verify the required parameter 'externalSubscriptionId' is set
            if (externalSubscriptionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'externalSubscriptionId' when calling CustomersApi->FindCustomerCurrentUsage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(customerExternalId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "external_subscription_id", externalSubscriptionId));

            localVarRequestOptions.Operation = "CustomersApi.FindCustomerCurrentUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerUsage>("/customers/{customer_external_id}/current_usage", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCustomerCurrentUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find customer current usage Return a customer current usage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerUsage</returns>
        public async System.Threading.Tasks.Task<CustomerUsage> FindCustomerCurrentUsageAsync(string customerExternalId, string externalSubscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CustomerUsage> localVarResponse = await FindCustomerCurrentUsageWithHttpInfoAsync(customerExternalId, externalSubscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find customer current usage Return a customer current usage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerUsage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CustomerUsage>> FindCustomerCurrentUsageWithHttpInfoAsync(string customerExternalId, string externalSubscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->FindCustomerCurrentUsage");
            }

            // verify the required parameter 'externalSubscriptionId' is set
            if (externalSubscriptionId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'externalSubscriptionId' when calling CustomersApi->FindCustomerCurrentUsage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(customerExternalId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "external_subscription_id", externalSubscriptionId));

            localVarRequestOptions.Operation = "CustomersApi.FindCustomerCurrentUsage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerUsage>("/customers/{customer_external_id}/current_usage", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindCustomerCurrentUsage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer portal URL Get customer portal URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCustomerPortalUrl200Response</returns>
        public GetCustomerPortalUrl200Response GetCustomerPortalUrl(string customerExternalId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetCustomerPortalUrl200Response> localVarResponse = GetCustomerPortalUrlWithHttpInfo(customerExternalId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer portal URL Get customer portal URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCustomerPortalUrl200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetCustomerPortalUrl200Response> GetCustomerPortalUrlWithHttpInfo(string customerExternalId, int operationIndex = 0)
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->GetCustomerPortalUrl");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(customerExternalId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.GetCustomerPortalUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCustomerPortalUrl200Response>("/customers/{customer_external_id}/portal_url", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPortalUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer portal URL Get customer portal URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomerPortalUrl200Response</returns>
        public async System.Threading.Tasks.Task<GetCustomerPortalUrl200Response> GetCustomerPortalUrlAsync(string customerExternalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetCustomerPortalUrl200Response> localVarResponse = await GetCustomerPortalUrlWithHttpInfoAsync(customerExternalId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer portal URL Get customer portal URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomerPortalUrl200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetCustomerPortalUrl200Response>> GetCustomerPortalUrlWithHttpInfoAsync(string customerExternalId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->GetCustomerPortalUrl");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_external_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(customerExternalId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.GetCustomerPortalUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCustomerPortalUrl200Response>("/customers/{customer_external_id}/portal_url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerPortalUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
