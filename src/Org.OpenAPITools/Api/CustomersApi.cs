/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a customer
        /// </summary>
        /// <remarks>
        /// Create a new customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <returns>Customer</returns>
        Customer CreateCustomer (CustomerInput customerInput);

        /// <summary>
        /// Create a customer
        /// </summary>
        /// <remarks>
        /// Create a new customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CreateCustomerWithHttpInfo (CustomerInput customerInput);
        /// <summary>
        /// Delete customer's appplied coupon
        /// </summary>
        /// <remarks>
        /// Delete customer's appplied coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <returns>AppliedCoupon</returns>
        AppliedCoupon DeleteAppliedCoupon (string customerExternalId, string appliedCouponId);

        /// <summary>
        /// Delete customer's appplied coupon
        /// </summary>
        /// <remarks>
        /// Delete customer's appplied coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <returns>ApiResponse of AppliedCoupon</returns>
        ApiResponse<AppliedCoupon> DeleteAppliedCouponWithHttpInfo (string customerExternalId, string appliedCouponId);
        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Return the deleted customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <returns>Customer</returns>
        Customer DestroyCustomer (string externalId);

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Return the deleted customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> DestroyCustomerWithHttpInfo (string externalId);
        /// <summary>
        /// Find customers
        /// </summary>
        /// <remarks>
        /// Find all customers in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>CustomersPaginated</returns>
        CustomersPaginated FindAllCustomers (int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Find customers
        /// </summary>
        /// <remarks>
        /// Find all customers in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of CustomersPaginated</returns>
        ApiResponse<CustomersPaginated> FindAllCustomersWithHttpInfo (int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Find customer by external ID
        /// </summary>
        /// <remarks>
        /// Return a single customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <returns>Customer</returns>
        Customer FindCustomer (string externalId);

        /// <summary>
        /// Find customer by external ID
        /// </summary>
        /// <remarks>
        /// Return a single customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> FindCustomerWithHttpInfo (string externalId);
        /// <summary>
        /// Find customer current usage
        /// </summary>
        /// <remarks>
        /// Return a customer current usage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <returns>CustomerUsage</returns>
        CustomerUsage FindCustomerCurrentUsage (string customerExternalId, string externalSubscriptionId);

        /// <summary>
        /// Find customer current usage
        /// </summary>
        /// <remarks>
        /// Return a customer current usage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <returns>ApiResponse of CustomerUsage</returns>
        ApiResponse<CustomerUsage> FindCustomerCurrentUsageWithHttpInfo (string customerExternalId, string externalSubscriptionId);
        /// <summary>
        /// Get customer portal URL
        /// </summary>
        /// <remarks>
        /// Get customer portal URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <returns>GetCustomerPortalUrl200Response</returns>
        GetCustomerPortalUrl200Response GetCustomerPortalUrl (string customerExternalId);

        /// <summary>
        /// Get customer portal URL
        /// </summary>
        /// <remarks>
        /// Get customer portal URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <returns>ApiResponse of GetCustomerPortalUrl200Response</returns>
        ApiResponse<GetCustomerPortalUrl200Response> GetCustomerPortalUrlWithHttpInfo (string customerExternalId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a customer
        /// </summary>
        /// <remarks>
        /// Create a new customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CreateCustomerAsync (CustomerInput customerInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a customer
        /// </summary>
        /// <remarks>
        /// Create a new customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerWithHttpInfoAsync (CustomerInput customerInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete customer's appplied coupon
        /// </summary>
        /// <remarks>
        /// Delete customer's appplied coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AppliedCoupon</returns>
        System.Threading.Tasks.Task<AppliedCoupon> DeleteAppliedCouponAsync (string customerExternalId, string appliedCouponId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete customer&#39;s appplied coupon
        /// </summary>
        /// <remarks>
        /// Delete customer's appplied coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AppliedCoupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppliedCoupon>> DeleteAppliedCouponWithHttpInfoAsync (string customerExternalId, string appliedCouponId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Return the deleted customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> DestroyCustomerAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a customer
        /// </summary>
        /// <remarks>
        /// Return the deleted customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> DestroyCustomerWithHttpInfoAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find customers
        /// </summary>
        /// <remarks>
        /// Find all customers in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomersPaginated</returns>
        System.Threading.Tasks.Task<CustomersPaginated> FindAllCustomersAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find customers
        /// </summary>
        /// <remarks>
        /// Find all customers in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomersPaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersPaginated>> FindAllCustomersWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find customer by external ID
        /// </summary>
        /// <remarks>
        /// Return a single customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> FindCustomerAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find customer by external ID
        /// </summary>
        /// <remarks>
        /// Return a single customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> FindCustomerWithHttpInfoAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find customer current usage
        /// </summary>
        /// <remarks>
        /// Return a customer current usage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerUsage</returns>
        System.Threading.Tasks.Task<CustomerUsage> FindCustomerCurrentUsageAsync (string customerExternalId, string externalSubscriptionId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find customer current usage
        /// </summary>
        /// <remarks>
        /// Return a customer current usage
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerUsage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerUsage>> FindCustomerCurrentUsageWithHttpInfoAsync (string customerExternalId, string externalSubscriptionId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get customer portal URL
        /// </summary>
        /// <remarks>
        /// Get customer portal URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCustomerPortalUrl200Response</returns>
        System.Threading.Tasks.Task<GetCustomerPortalUrl200Response> GetCustomerPortalUrlAsync (string customerExternalId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get customer portal URL
        /// </summary>
        /// <remarks>
        /// Get customer portal URL
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCustomerPortalUrl200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomerPortalUrl200Response>> GetCustomerPortalUrlWithHttpInfoAsync (string customerExternalId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomersApi : ICustomersApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// </summary>
        /// <returns></returns>
        public CustomersApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomersApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a customer Create a new customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <returns>Customer</returns>
        public Customer CreateCustomer (CustomerInput customerInput)
        {
             ApiResponse<Customer> localVarResponse = CreateCustomerWithHttpInfo(customerInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a customer Create a new customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse<Customer> CreateCustomerWithHttpInfo (CustomerInput customerInput)
        {
            // verify the required parameter 'customerInput' is set
            if (customerInput == null)
                throw new ApiException(400, "Missing required parameter 'customerInput' when calling CustomersApi->CreateCustomer");

            var localVarPath = "/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInput != null && customerInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customerInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Customer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
        }

        /// <summary>
        /// Create a customer Create a new customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CreateCustomerAsync (CustomerInput customerInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Customer> localVarResponse = await CreateCustomerWithHttpInfoAsync(customerInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a customer Create a new customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerInput">Customer payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerWithHttpInfoAsync (CustomerInput customerInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerInput' is set
            if (customerInput == null)
                throw new ApiException(400, "Missing required parameter 'customerInput' when calling CustomersApi->CreateCustomer");

            var localVarPath = "/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerInput != null && customerInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(customerInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = customerInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Customer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
        }

        /// <summary>
        /// Delete customer's appplied coupon Delete customer's appplied coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <returns>AppliedCoupon</returns>
        public AppliedCoupon DeleteAppliedCoupon (string customerExternalId, string appliedCouponId)
        {
             ApiResponse<AppliedCoupon> localVarResponse = DeleteAppliedCouponWithHttpInfo(customerExternalId, appliedCouponId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete customer's appplied coupon Delete customer's appplied coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <returns>ApiResponse of AppliedCoupon</returns>
        public ApiResponse<AppliedCoupon> DeleteAppliedCouponWithHttpInfo (string customerExternalId, string appliedCouponId)
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
                throw new ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->DeleteAppliedCoupon");
            // verify the required parameter 'appliedCouponId' is set
            if (appliedCouponId == null)
                throw new ApiException(400, "Missing required parameter 'appliedCouponId' when calling CustomersApi->DeleteAppliedCoupon");

            var localVarPath = "/customers/{customer_external_id}/applied_coupons/{applied_coupon_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerExternalId != null) localVarPathParams.Add("customer_external_id", this.Configuration.ApiClient.ParameterToString(customerExternalId)); // path parameter
            if (appliedCouponId != null) localVarPathParams.Add("applied_coupon_id", this.Configuration.ApiClient.ParameterToString(appliedCouponId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppliedCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppliedCoupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppliedCoupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppliedCoupon)));
        }

        /// <summary>
        /// Delete customer's appplied coupon Delete customer's appplied coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AppliedCoupon</returns>
        public async System.Threading.Tasks.Task<AppliedCoupon> DeleteAppliedCouponAsync (string customerExternalId, string appliedCouponId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AppliedCoupon> localVarResponse = await DeleteAppliedCouponWithHttpInfoAsync(customerExternalId, appliedCouponId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete customer's appplied coupon Delete customer's appplied coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="appliedCouponId">Applied Coupon Lago ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AppliedCoupon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppliedCoupon>> DeleteAppliedCouponWithHttpInfoAsync (string customerExternalId, string appliedCouponId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
                throw new ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->DeleteAppliedCoupon");
            // verify the required parameter 'appliedCouponId' is set
            if (appliedCouponId == null)
                throw new ApiException(400, "Missing required parameter 'appliedCouponId' when calling CustomersApi->DeleteAppliedCoupon");

            var localVarPath = "/customers/{customer_external_id}/applied_coupons/{applied_coupon_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerExternalId != null) localVarPathParams.Add("customer_external_id", this.Configuration.ApiClient.ParameterToString(customerExternalId)); // path parameter
            if (appliedCouponId != null) localVarPathParams.Add("applied_coupon_id", this.Configuration.ApiClient.ParameterToString(appliedCouponId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppliedCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppliedCoupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppliedCoupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppliedCoupon)));
        }

        /// <summary>
        /// Delete a customer Return the deleted customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <returns>Customer</returns>
        public Customer DestroyCustomer (string externalId)
        {
             ApiResponse<Customer> localVarResponse = DestroyCustomerWithHttpInfo(externalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a customer Return the deleted customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse<Customer> DestroyCustomerWithHttpInfo (string externalId)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling CustomersApi->DestroyCustomer");

            var localVarPath = "/customers/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Customer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
        }

        /// <summary>
        /// Delete a customer Return the deleted customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> DestroyCustomerAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Customer> localVarResponse = await DestroyCustomerWithHttpInfoAsync(externalId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a customer Return the deleted customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> DestroyCustomerWithHttpInfoAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling CustomersApi->DestroyCustomer");

            var localVarPath = "/customers/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Customer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
        }

        /// <summary>
        /// Find customers Find all customers in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>CustomersPaginated</returns>
        public CustomersPaginated FindAllCustomers (int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<CustomersPaginated> localVarResponse = FindAllCustomersWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find customers Find all customers in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of CustomersPaginated</returns>
        public ApiResponse<CustomersPaginated> FindAllCustomersWithHttpInfo (int? page = default(int?), int? perPage = default(int?))
        {

            var localVarPath = "/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomersPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomersPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomersPaginated)));
        }

        /// <summary>
        /// Find customers Find all customers in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomersPaginated</returns>
        public async System.Threading.Tasks.Task<CustomersPaginated> FindAllCustomersAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomersPaginated> localVarResponse = await FindAllCustomersWithHttpInfoAsync(page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find customers Find all customers in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomersPaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomersPaginated>> FindAllCustomersWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomersPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomersPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomersPaginated)));
        }

        /// <summary>
        /// Find customer by external ID Return a single customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <returns>Customer</returns>
        public Customer FindCustomer (string externalId)
        {
             ApiResponse<Customer> localVarResponse = FindCustomerWithHttpInfo(externalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find customer by external ID Return a single customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <returns>ApiResponse of Customer</returns>
        public ApiResponse<Customer> FindCustomerWithHttpInfo (string externalId)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling CustomersApi->FindCustomer");

            var localVarPath = "/customers/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Customer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
        }

        /// <summary>
        /// Find customer by external ID Return a single customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> FindCustomerAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Customer> localVarResponse = await FindCustomerWithHttpInfoAsync(externalId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find customer by external ID Return a single customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Customer>> FindCustomerWithHttpInfoAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling CustomersApi->FindCustomer");

            var localVarPath = "/customers/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Customer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Customer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Customer)));
        }

        /// <summary>
        /// Find customer current usage Return a customer current usage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <returns>CustomerUsage</returns>
        public CustomerUsage FindCustomerCurrentUsage (string customerExternalId, string externalSubscriptionId)
        {
             ApiResponse<CustomerUsage> localVarResponse = FindCustomerCurrentUsageWithHttpInfo(customerExternalId, externalSubscriptionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find customer current usage Return a customer current usage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <returns>ApiResponse of CustomerUsage</returns>
        public ApiResponse<CustomerUsage> FindCustomerCurrentUsageWithHttpInfo (string customerExternalId, string externalSubscriptionId)
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
                throw new ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->FindCustomerCurrentUsage");
            // verify the required parameter 'externalSubscriptionId' is set
            if (externalSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'externalSubscriptionId' when calling CustomersApi->FindCustomerCurrentUsage");

            var localVarPath = "/customers/{customer_external_id}/current_usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerExternalId != null) localVarPathParams.Add("customer_external_id", this.Configuration.ApiClient.ParameterToString(customerExternalId)); // path parameter
            if (externalSubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_subscription_id", externalSubscriptionId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindCustomerCurrentUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerUsage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerUsage)));
        }

        /// <summary>
        /// Find customer current usage Return a customer current usage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomerUsage</returns>
        public async System.Threading.Tasks.Task<CustomerUsage> FindCustomerCurrentUsageAsync (string customerExternalId, string externalSubscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CustomerUsage> localVarResponse = await FindCustomerCurrentUsageWithHttpInfoAsync(customerExternalId, externalSubscriptionId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find customer current usage Return a customer current usage
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="externalSubscriptionId">External subscription ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomerUsage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerUsage>> FindCustomerCurrentUsageWithHttpInfoAsync (string customerExternalId, string externalSubscriptionId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
                throw new ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->FindCustomerCurrentUsage");
            // verify the required parameter 'externalSubscriptionId' is set
            if (externalSubscriptionId == null)
                throw new ApiException(400, "Missing required parameter 'externalSubscriptionId' when calling CustomersApi->FindCustomerCurrentUsage");

            var localVarPath = "/customers/{customer_external_id}/current_usage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerExternalId != null) localVarPathParams.Add("customer_external_id", this.Configuration.ApiClient.ParameterToString(customerExternalId)); // path parameter
            if (externalSubscriptionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_subscription_id", externalSubscriptionId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindCustomerCurrentUsage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerUsage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerUsage)));
        }

        /// <summary>
        /// Get customer portal URL Get customer portal URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <returns>GetCustomerPortalUrl200Response</returns>
        public GetCustomerPortalUrl200Response GetCustomerPortalUrl (string customerExternalId)
        {
             ApiResponse<GetCustomerPortalUrl200Response> localVarResponse = GetCustomerPortalUrlWithHttpInfo(customerExternalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer portal URL Get customer portal URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <returns>ApiResponse of GetCustomerPortalUrl200Response</returns>
        public ApiResponse<GetCustomerPortalUrl200Response> GetCustomerPortalUrlWithHttpInfo (string customerExternalId)
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
                throw new ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->GetCustomerPortalUrl");

            var localVarPath = "/customers/{customer_external_id}/portal_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerExternalId != null) localVarPathParams.Add("customer_external_id", this.Configuration.ApiClient.ParameterToString(customerExternalId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerPortalUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCustomerPortalUrl200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCustomerPortalUrl200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCustomerPortalUrl200Response)));
        }

        /// <summary>
        /// Get customer portal URL Get customer portal URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetCustomerPortalUrl200Response</returns>
        public async System.Threading.Tasks.Task<GetCustomerPortalUrl200Response> GetCustomerPortalUrlAsync (string customerExternalId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetCustomerPortalUrl200Response> localVarResponse = await GetCustomerPortalUrlWithHttpInfoAsync(customerExternalId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get customer portal URL Get customer portal URL
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerExternalId">External ID of the existing customer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetCustomerPortalUrl200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCustomerPortalUrl200Response>> GetCustomerPortalUrlWithHttpInfoAsync (string customerExternalId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'customerExternalId' is set
            if (customerExternalId == null)
                throw new ApiException(400, "Missing required parameter 'customerExternalId' when calling CustomersApi->GetCustomerPortalUrl");

            var localVarPath = "/customers/{customer_external_id}/portal_url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerExternalId != null) localVarPathParams.Add("customer_external_id", this.Configuration.ApiClient.ParameterToString(customerExternalId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerPortalUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCustomerPortalUrl200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetCustomerPortalUrl200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCustomerPortalUrl200Response)));
        }

    }
}
