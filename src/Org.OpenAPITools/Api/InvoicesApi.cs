/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvoicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new invoice
        /// </summary>
        /// <remarks>
        /// Create a new one off Invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceOneOffInput">Invoice payload</param>
        /// <returns>Invoice</returns>
        Invoice CreateInvoice (InvoiceOneOffInput invoiceOneOffInput);

        /// <summary>
        /// Create a new invoice
        /// </summary>
        /// <remarks>
        /// Create a new one off Invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceOneOffInput">Invoice payload</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> CreateInvoiceWithHttpInfo (InvoiceOneOffInput invoiceOneOffInput);
        /// <summary>
        /// Download an existing invoice
        /// </summary>
        /// <remarks>
        /// Download an existing invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>Invoice</returns>
        Invoice DownloadInvoice (Guid id);

        /// <summary>
        /// Download an existing invoice
        /// </summary>
        /// <remarks>
        /// Download an existing invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> DownloadInvoiceWithHttpInfo (Guid id);
        /// <summary>
        /// Finalize a draft invoice
        /// </summary>
        /// <remarks>
        /// Finalize a draft invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the draft Lago Invoice</param>
        /// <returns>Invoice</returns>
        Invoice FinalizeInvoice (Guid id);

        /// <summary>
        /// Finalize a draft invoice
        /// </summary>
        /// <remarks>
        /// Finalize a draft invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the draft Lago Invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> FinalizeInvoiceWithHttpInfo (Guid id);
        /// <summary>
        /// Find all invoices
        /// </summary>
        /// <remarks>
        /// Find all invoices in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="issuingDateFrom">Date from (optional)</param>
        /// <param name="issuingDateTo">Date to (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <returns>InvoicesPaginated</returns>
        InvoicesPaginated FindAllInvoices (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), DateTime? issuingDateFrom = default(DateTime?), DateTime? issuingDateTo = default(DateTime?), string status = default(string));

        /// <summary>
        /// Find all invoices
        /// </summary>
        /// <remarks>
        /// Find all invoices in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="issuingDateFrom">Date from (optional)</param>
        /// <param name="issuingDateTo">Date to (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <returns>ApiResponse of InvoicesPaginated</returns>
        ApiResponse<InvoicesPaginated> FindAllInvoicesWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), DateTime? issuingDateFrom = default(DateTime?), DateTime? issuingDateTo = default(DateTime?), string status = default(string));
        /// <summary>
        /// Find invoice by ID
        /// </summary>
        /// <remarks>
        /// Return a single invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>Invoice</returns>
        Invoice FindInvoice (Guid id);

        /// <summary>
        /// Find invoice by ID
        /// </summary>
        /// <remarks>
        /// Return a single invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> FindInvoiceWithHttpInfo (Guid id);
        /// <summary>
        /// Refresh a draft invoice
        /// </summary>
        /// <remarks>
        /// Refresh a draft invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>Invoice</returns>
        Invoice RefreshInvoice (Guid id);

        /// <summary>
        /// Refresh a draft invoice
        /// </summary>
        /// <remarks>
        /// Refresh a draft invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> RefreshInvoiceWithHttpInfo (Guid id);
        /// <summary>
        /// Retry invoice payment
        /// </summary>
        /// <remarks>
        /// Retry invoice payment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns></returns>
        void RetryPayment (Guid id);

        /// <summary>
        /// Retry invoice payment
        /// </summary>
        /// <remarks>
        /// Retry invoice payment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RetryPaymentWithHttpInfo (Guid id);
        /// <summary>
        /// Update an existing invoice status
        /// </summary>
        /// <remarks>
        /// Update an existing invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="invoiceInput">Update an existing invoice</param>
        /// <returns>Invoice</returns>
        Invoice UpdateInvoice (Guid id, InvoiceInput invoiceInput);

        /// <summary>
        /// Update an existing invoice status
        /// </summary>
        /// <remarks>
        /// Update an existing invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="invoiceInput">Update an existing invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        ApiResponse<Invoice> UpdateInvoiceWithHttpInfo (Guid id, InvoiceInput invoiceInput);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new invoice
        /// </summary>
        /// <remarks>
        /// Create a new one off Invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceOneOffInput">Invoice payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> CreateInvoiceAsync (InvoiceOneOffInput invoiceOneOffInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new invoice
        /// </summary>
        /// <remarks>
        /// Create a new one off Invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceOneOffInput">Invoice payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> CreateInvoiceWithHttpInfoAsync (InvoiceOneOffInput invoiceOneOffInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Download an existing invoice
        /// </summary>
        /// <remarks>
        /// Download an existing invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> DownloadInvoiceAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download an existing invoice
        /// </summary>
        /// <remarks>
        /// Download an existing invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> DownloadInvoiceWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Finalize a draft invoice
        /// </summary>
        /// <remarks>
        /// Finalize a draft invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the draft Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> FinalizeInvoiceAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finalize a draft invoice
        /// </summary>
        /// <remarks>
        /// Finalize a draft invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the draft Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> FinalizeInvoiceWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find all invoices
        /// </summary>
        /// <remarks>
        /// Find all invoices in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="issuingDateFrom">Date from (optional)</param>
        /// <param name="issuingDateTo">Date to (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InvoicesPaginated</returns>
        System.Threading.Tasks.Task<InvoicesPaginated> FindAllInvoicesAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), DateTime? issuingDateFrom = default(DateTime?), DateTime? issuingDateTo = default(DateTime?), string status = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find all invoices
        /// </summary>
        /// <remarks>
        /// Find all invoices in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="issuingDateFrom">Date from (optional)</param>
        /// <param name="issuingDateTo">Date to (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InvoicesPaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoicesPaginated>> FindAllInvoicesWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), DateTime? issuingDateFrom = default(DateTime?), DateTime? issuingDateTo = default(DateTime?), string status = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find invoice by ID
        /// </summary>
        /// <remarks>
        /// Return a single invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> FindInvoiceAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find invoice by ID
        /// </summary>
        /// <remarks>
        /// Return a single invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> FindInvoiceWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Refresh a draft invoice
        /// </summary>
        /// <remarks>
        /// Refresh a draft invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> RefreshInvoiceAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Refresh a draft invoice
        /// </summary>
        /// <remarks>
        /// Refresh a draft invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> RefreshInvoiceWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retry invoice payment
        /// </summary>
        /// <remarks>
        /// Retry invoice payment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RetryPaymentAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retry invoice payment
        /// </summary>
        /// <remarks>
        /// Retry invoice payment
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RetryPaymentWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing invoice status
        /// </summary>
        /// <remarks>
        /// Update an existing invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="invoiceInput">Update an existing invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        System.Threading.Tasks.Task<Invoice> UpdateInvoiceAsync (Guid id, InvoiceInput invoiceInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing invoice status
        /// </summary>
        /// <remarks>
        /// Update an existing invoice
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="invoiceInput">Update an existing invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invoice>> UpdateInvoiceWithHttpInfoAsync (Guid id, InvoiceInput invoiceInput, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvoicesApi : IInvoicesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvoicesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public InvoicesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvoicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvoicesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new invoice Create a new one off Invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceOneOffInput">Invoice payload</param>
        /// <returns>Invoice</returns>
        public Invoice CreateInvoice (InvoiceOneOffInput invoiceOneOffInput)
        {
             ApiResponse<Invoice> localVarResponse = CreateInvoiceWithHttpInfo(invoiceOneOffInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new invoice Create a new one off Invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceOneOffInput">Invoice payload</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse<Invoice> CreateInvoiceWithHttpInfo (InvoiceOneOffInput invoiceOneOffInput)
        {
            // verify the required parameter 'invoiceOneOffInput' is set
            if (invoiceOneOffInput == null)
                throw new ApiException(400, "Missing required parameter 'invoiceOneOffInput' when calling InvoicesApi->CreateInvoice");

            var localVarPath = "/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceOneOffInput != null && invoiceOneOffInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invoiceOneOffInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceOneOffInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Create a new invoice Create a new one off Invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceOneOffInput">Invoice payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> CreateInvoiceAsync (InvoiceOneOffInput invoiceOneOffInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Invoice> localVarResponse = await CreateInvoiceWithHttpInfoAsync(invoiceOneOffInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new invoice Create a new one off Invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invoiceOneOffInput">Invoice payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> CreateInvoiceWithHttpInfoAsync (InvoiceOneOffInput invoiceOneOffInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'invoiceOneOffInput' is set
            if (invoiceOneOffInput == null)
                throw new ApiException(400, "Missing required parameter 'invoiceOneOffInput' when calling InvoicesApi->CreateInvoice");

            var localVarPath = "/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invoiceOneOffInput != null && invoiceOneOffInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invoiceOneOffInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceOneOffInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Download an existing invoice Download an existing invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>Invoice</returns>
        public Invoice DownloadInvoice (Guid id)
        {
             ApiResponse<Invoice> localVarResponse = DownloadInvoiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download an existing invoice Download an existing invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse<Invoice> DownloadInvoiceWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->DownloadInvoice");

            var localVarPath = "/invoices/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Download an existing invoice Download an existing invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> DownloadInvoiceAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Invoice> localVarResponse = await DownloadInvoiceWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download an existing invoice Download an existing invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> DownloadInvoiceWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->DownloadInvoice");

            var localVarPath = "/invoices/{id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Finalize a draft invoice Finalize a draft invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the draft Lago Invoice</param>
        /// <returns>Invoice</returns>
        public Invoice FinalizeInvoice (Guid id)
        {
             ApiResponse<Invoice> localVarResponse = FinalizeInvoiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finalize a draft invoice Finalize a draft invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the draft Lago Invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse<Invoice> FinalizeInvoiceWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->FinalizeInvoice");

            var localVarPath = "/invoices/{id}/finalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinalizeInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Finalize a draft invoice Finalize a draft invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the draft Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> FinalizeInvoiceAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Invoice> localVarResponse = await FinalizeInvoiceWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finalize a draft invoice Finalize a draft invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the draft Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> FinalizeInvoiceWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->FinalizeInvoice");

            var localVarPath = "/invoices/{id}/finalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinalizeInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Find all invoices Find all invoices in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="issuingDateFrom">Date from (optional)</param>
        /// <param name="issuingDateTo">Date to (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <returns>InvoicesPaginated</returns>
        public InvoicesPaginated FindAllInvoices (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), DateTime? issuingDateFrom = default(DateTime?), DateTime? issuingDateTo = default(DateTime?), string status = default(string))
        {
             ApiResponse<InvoicesPaginated> localVarResponse = FindAllInvoicesWithHttpInfo(page, perPage, externalCustomerId, issuingDateFrom, issuingDateTo, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find all invoices Find all invoices in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="issuingDateFrom">Date from (optional)</param>
        /// <param name="issuingDateTo">Date to (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <returns>ApiResponse of InvoicesPaginated</returns>
        public ApiResponse<InvoicesPaginated> FindAllInvoicesWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), DateTime? issuingDateFrom = default(DateTime?), DateTime? issuingDateTo = default(DateTime?), string status = default(string))
        {

            var localVarPath = "/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter
            if (issuingDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issuing_date_from", issuingDateFrom)); // query parameter
            if (issuingDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issuing_date_to", issuingDateTo)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicesPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InvoicesPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicesPaginated)));
        }

        /// <summary>
        /// Find all invoices Find all invoices in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="issuingDateFrom">Date from (optional)</param>
        /// <param name="issuingDateTo">Date to (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InvoicesPaginated</returns>
        public async System.Threading.Tasks.Task<InvoicesPaginated> FindAllInvoicesAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), DateTime? issuingDateFrom = default(DateTime?), DateTime? issuingDateTo = default(DateTime?), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InvoicesPaginated> localVarResponse = await FindAllInvoicesWithHttpInfoAsync(page, perPage, externalCustomerId, issuingDateFrom, issuingDateTo, status, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find all invoices Find all invoices in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="issuingDateFrom">Date from (optional)</param>
        /// <param name="issuingDateTo">Date to (optional)</param>
        /// <param name="status">Status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InvoicesPaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoicesPaginated>> FindAllInvoicesWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string externalCustomerId = default(string), DateTime? issuingDateFrom = default(DateTime?), DateTime? issuingDateTo = default(DateTime?), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter
            if (issuingDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issuing_date_from", issuingDateFrom)); // query parameter
            if (issuingDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "issuing_date_to", issuingDateTo)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoicesPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InvoicesPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoicesPaginated)));
        }

        /// <summary>
        /// Find invoice by ID Return a single invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>Invoice</returns>
        public Invoice FindInvoice (Guid id)
        {
             ApiResponse<Invoice> localVarResponse = FindInvoiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find invoice by ID Return a single invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse<Invoice> FindInvoiceWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->FindInvoice");

            var localVarPath = "/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Find invoice by ID Return a single invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> FindInvoiceAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Invoice> localVarResponse = await FindInvoiceWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find invoice by ID Return a single invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> FindInvoiceWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->FindInvoice");

            var localVarPath = "/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Refresh a draft invoice Refresh a draft invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>Invoice</returns>
        public Invoice RefreshInvoice (Guid id)
        {
             ApiResponse<Invoice> localVarResponse = RefreshInvoiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh a draft invoice Refresh a draft invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse<Invoice> RefreshInvoiceWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->RefreshInvoice");

            var localVarPath = "/invoices/{id}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Refresh a draft invoice Refresh a draft invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> RefreshInvoiceAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Invoice> localVarResponse = await RefreshInvoiceWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refresh a draft invoice Refresh a draft invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> RefreshInvoiceWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->RefreshInvoice");

            var localVarPath = "/invoices/{id}/refresh";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Retry invoice payment Retry invoice payment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns></returns>
        public void RetryPayment (Guid id)
        {
             RetryPaymentWithHttpInfo(id);
        }

        /// <summary>
        /// Retry invoice payment Retry invoice payment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RetryPaymentWithHttpInfo (Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->RetryPayment");

            var localVarPath = "/invoices/{id}/retry_payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Retry invoice payment Retry invoice payment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RetryPaymentAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
             await RetryPaymentWithHttpInfoAsync(id, cancellationToken);

        }

        /// <summary>
        /// Retry invoice payment Retry invoice payment
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RetryPaymentWithHttpInfoAsync (Guid id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->RetryPayment");

            var localVarPath = "/invoices/{id}/retry_payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update an existing invoice status Update an existing invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="invoiceInput">Update an existing invoice</param>
        /// <returns>Invoice</returns>
        public Invoice UpdateInvoice (Guid id, InvoiceInput invoiceInput)
        {
             ApiResponse<Invoice> localVarResponse = UpdateInvoiceWithHttpInfo(id, invoiceInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing invoice status Update an existing invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="invoiceInput">Update an existing invoice</param>
        /// <returns>ApiResponse of Invoice</returns>
        public ApiResponse<Invoice> UpdateInvoiceWithHttpInfo (Guid id, InvoiceInput invoiceInput)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'invoiceInput' is set
            if (invoiceInput == null)
                throw new ApiException(400, "Missing required parameter 'invoiceInput' when calling InvoicesApi->UpdateInvoice");

            var localVarPath = "/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (invoiceInput != null && invoiceInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invoiceInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

        /// <summary>
        /// Update an existing invoice status Update an existing invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="invoiceInput">Update an existing invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Invoice</returns>
        public async System.Threading.Tasks.Task<Invoice> UpdateInvoiceAsync (Guid id, InvoiceInput invoiceInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Invoice> localVarResponse = await UpdateInvoiceWithHttpInfoAsync(id, invoiceInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing invoice status Update an existing invoice
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the existing Lago Invoice</param>
        /// <param name="invoiceInput">Update an existing invoice</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Invoice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Invoice>> UpdateInvoiceWithHttpInfoAsync (Guid id, InvoiceInput invoiceInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InvoicesApi->UpdateInvoice");
            // verify the required parameter 'invoiceInput' is set
            if (invoiceInput == null)
                throw new ApiException(400, "Missing required parameter 'invoiceInput' when calling InvoicesApi->UpdateInvoice");

            var localVarPath = "/invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (invoiceInput != null && invoiceInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(invoiceInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = invoiceInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Invoice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Invoice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Invoice)));
        }

    }
}
