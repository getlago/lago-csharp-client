/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICouponsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Apply a coupon to a customer
        /// </summary>
        /// <remarks>
        /// Apply a coupon to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedCouponInput">Apply coupon payload</param>
        /// <returns>AppliedCoupon</returns>
        AppliedCoupon ApplyCoupon (AppliedCouponInput appliedCouponInput);

        /// <summary>
        /// Apply a coupon to a customer
        /// </summary>
        /// <remarks>
        /// Apply a coupon to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedCouponInput">Apply coupon payload</param>
        /// <returns>ApiResponse of AppliedCoupon</returns>
        ApiResponse<AppliedCoupon> ApplyCouponWithHttpInfo (AppliedCouponInput appliedCouponInput);
        /// <summary>
        /// Create a new coupon
        /// </summary>
        /// <remarks>
        /// Create a new coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponInput">Coupon payload</param>
        /// <returns>Coupon</returns>
        Coupon CreateCoupon (CouponInput couponInput);

        /// <summary>
        /// Create a new coupon
        /// </summary>
        /// <remarks>
        /// Create a new coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponInput">Coupon payload</param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> CreateCouponWithHttpInfo (CouponInput couponInput);
        /// <summary>
        /// Delete a coupon
        /// </summary>
        /// <remarks>
        /// Delete a coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <returns>Coupon</returns>
        Coupon DestroyCoupon (string code);

        /// <summary>
        /// Delete a coupon
        /// </summary>
        /// <remarks>
        /// Delete a coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> DestroyCouponWithHttpInfo (string code);
        /// <summary>
        /// Find Applied Coupons
        /// </summary>
        /// <remarks>
        /// Find all applied coupons
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="status">Applied coupon status (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <returns>AppliedCouponsPaginated</returns>
        AppliedCouponsPaginated FindAllAppliedCoupons (int? page = default(int?), int? perPage = default(int?), string status = default(string), string externalCustomerId = default(string));

        /// <summary>
        /// Find Applied Coupons
        /// </summary>
        /// <remarks>
        /// Find all applied coupons
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="status">Applied coupon status (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <returns>ApiResponse of AppliedCouponsPaginated</returns>
        ApiResponse<AppliedCouponsPaginated> FindAllAppliedCouponsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string status = default(string), string externalCustomerId = default(string));
        /// <summary>
        /// Find Coupons
        /// </summary>
        /// <remarks>
        /// Find all coupons in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>CouponsPaginated</returns>
        CouponsPaginated FindAllCoupons (int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Find Coupons
        /// </summary>
        /// <remarks>
        /// Find all coupons in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of CouponsPaginated</returns>
        ApiResponse<CouponsPaginated> FindAllCouponsWithHttpInfo (int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Find coupon by code
        /// </summary>
        /// <remarks>
        /// Return a single coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <returns>Coupon</returns>
        Coupon FindCoupon (string code);

        /// <summary>
        /// Find coupon by code
        /// </summary>
        /// <remarks>
        /// Return a single coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> FindCouponWithHttpInfo (string code);
        /// <summary>
        /// Update an existing coupon
        /// </summary>
        /// <remarks>
        /// Update an existing coupon by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="couponInput">Update an existing coupon</param>
        /// <returns>Coupon</returns>
        Coupon UpdateCoupon (string code, CouponInput couponInput);

        /// <summary>
        /// Update an existing coupon
        /// </summary>
        /// <remarks>
        /// Update an existing coupon by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="couponInput">Update an existing coupon</param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> UpdateCouponWithHttpInfo (string code, CouponInput couponInput);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Apply a coupon to a customer
        /// </summary>
        /// <remarks>
        /// Apply a coupon to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedCouponInput">Apply coupon payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AppliedCoupon</returns>
        System.Threading.Tasks.Task<AppliedCoupon> ApplyCouponAsync (AppliedCouponInput appliedCouponInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Apply a coupon to a customer
        /// </summary>
        /// <remarks>
        /// Apply a coupon to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedCouponInput">Apply coupon payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AppliedCoupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppliedCoupon>> ApplyCouponWithHttpInfoAsync (AppliedCouponInput appliedCouponInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new coupon
        /// </summary>
        /// <remarks>
        /// Create a new coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponInput">Coupon payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> CreateCouponAsync (CouponInput couponInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new coupon
        /// </summary>
        /// <remarks>
        /// Create a new coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponInput">Coupon payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> CreateCouponWithHttpInfoAsync (CouponInput couponInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a coupon
        /// </summary>
        /// <remarks>
        /// Delete a coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> DestroyCouponAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a coupon
        /// </summary>
        /// <remarks>
        /// Delete a coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> DestroyCouponWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find Applied Coupons
        /// </summary>
        /// <remarks>
        /// Find all applied coupons
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="status">Applied coupon status (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AppliedCouponsPaginated</returns>
        System.Threading.Tasks.Task<AppliedCouponsPaginated> FindAllAppliedCouponsAsync (int? page = default(int?), int? perPage = default(int?), string status = default(string), string externalCustomerId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find Applied Coupons
        /// </summary>
        /// <remarks>
        /// Find all applied coupons
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="status">Applied coupon status (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AppliedCouponsPaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppliedCouponsPaginated>> FindAllAppliedCouponsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string status = default(string), string externalCustomerId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find Coupons
        /// </summary>
        /// <remarks>
        /// Find all coupons in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CouponsPaginated</returns>
        System.Threading.Tasks.Task<CouponsPaginated> FindAllCouponsAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find Coupons
        /// </summary>
        /// <remarks>
        /// Find all coupons in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CouponsPaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<CouponsPaginated>> FindAllCouponsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find coupon by code
        /// </summary>
        /// <remarks>
        /// Return a single coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> FindCouponAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find coupon by code
        /// </summary>
        /// <remarks>
        /// Return a single coupon
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> FindCouponWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing coupon
        /// </summary>
        /// <remarks>
        /// Update an existing coupon by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="couponInput">Update an existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (string code, CouponInput couponInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing coupon
        /// </summary>
        /// <remarks>
        /// Update an existing coupon by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="couponInput">Update an existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> UpdateCouponWithHttpInfoAsync (string code, CouponInput couponInput, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CouponsApi : ICouponsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CouponsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CouponsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CouponsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CouponsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CouponsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CouponsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Apply a coupon to a customer Apply a coupon to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedCouponInput">Apply coupon payload</param>
        /// <returns>AppliedCoupon</returns>
        public AppliedCoupon ApplyCoupon (AppliedCouponInput appliedCouponInput)
        {
             ApiResponse<AppliedCoupon> localVarResponse = ApplyCouponWithHttpInfo(appliedCouponInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a coupon to a customer Apply a coupon to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedCouponInput">Apply coupon payload</param>
        /// <returns>ApiResponse of AppliedCoupon</returns>
        public ApiResponse<AppliedCoupon> ApplyCouponWithHttpInfo (AppliedCouponInput appliedCouponInput)
        {
            // verify the required parameter 'appliedCouponInput' is set
            if (appliedCouponInput == null)
                throw new ApiException(400, "Missing required parameter 'appliedCouponInput' when calling CouponsApi->ApplyCoupon");

            var localVarPath = "/applied_coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appliedCouponInput != null && appliedCouponInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appliedCouponInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appliedCouponInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppliedCoupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppliedCoupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppliedCoupon)));
        }

        /// <summary>
        /// Apply a coupon to a customer Apply a coupon to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedCouponInput">Apply coupon payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AppliedCoupon</returns>
        public async System.Threading.Tasks.Task<AppliedCoupon> ApplyCouponAsync (AppliedCouponInput appliedCouponInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AppliedCoupon> localVarResponse = await ApplyCouponWithHttpInfoAsync(appliedCouponInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply a coupon to a customer Apply a coupon to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appliedCouponInput">Apply coupon payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AppliedCoupon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppliedCoupon>> ApplyCouponWithHttpInfoAsync (AppliedCouponInput appliedCouponInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'appliedCouponInput' is set
            if (appliedCouponInput == null)
                throw new ApiException(400, "Missing required parameter 'appliedCouponInput' when calling CouponsApi->ApplyCoupon");

            var localVarPath = "/applied_coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (appliedCouponInput != null && appliedCouponInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(appliedCouponInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = appliedCouponInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApplyCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppliedCoupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppliedCoupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppliedCoupon)));
        }

        /// <summary>
        /// Create a new coupon Create a new coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponInput">Coupon payload</param>
        /// <returns>Coupon</returns>
        public Coupon CreateCoupon (CouponInput couponInput)
        {
             ApiResponse<Coupon> localVarResponse = CreateCouponWithHttpInfo(couponInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new coupon Create a new coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponInput">Coupon payload</param>
        /// <returns>ApiResponse of Coupon</returns>
        public ApiResponse<Coupon> CreateCouponWithHttpInfo (CouponInput couponInput)
        {
            // verify the required parameter 'couponInput' is set
            if (couponInput == null)
                throw new ApiException(400, "Missing required parameter 'couponInput' when calling CouponsApi->CreateCoupon");

            var localVarPath = "/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponInput != null && couponInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Create a new coupon Create a new coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponInput">Coupon payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> CreateCouponAsync (CouponInput couponInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Coupon> localVarResponse = await CreateCouponWithHttpInfoAsync(couponInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new coupon Create a new coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="couponInput">Coupon payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Coupon>> CreateCouponWithHttpInfoAsync (CouponInput couponInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'couponInput' is set
            if (couponInput == null)
                throw new ApiException(400, "Missing required parameter 'couponInput' when calling CouponsApi->CreateCoupon");

            var localVarPath = "/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (couponInput != null && couponInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Delete a coupon Delete a coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <returns>Coupon</returns>
        public Coupon DestroyCoupon (string code)
        {
             ApiResponse<Coupon> localVarResponse = DestroyCouponWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a coupon Delete a coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <returns>ApiResponse of Coupon</returns>
        public ApiResponse<Coupon> DestroyCouponWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CouponsApi->DestroyCoupon");

            var localVarPath = "/coupons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Delete a coupon Delete a coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> DestroyCouponAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Coupon> localVarResponse = await DestroyCouponWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a coupon Delete a coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Coupon>> DestroyCouponWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CouponsApi->DestroyCoupon");

            var localVarPath = "/coupons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Find Applied Coupons Find all applied coupons
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="status">Applied coupon status (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <returns>AppliedCouponsPaginated</returns>
        public AppliedCouponsPaginated FindAllAppliedCoupons (int? page = default(int?), int? perPage = default(int?), string status = default(string), string externalCustomerId = default(string))
        {
             ApiResponse<AppliedCouponsPaginated> localVarResponse = FindAllAppliedCouponsWithHttpInfo(page, perPage, status, externalCustomerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Applied Coupons Find all applied coupons
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="status">Applied coupon status (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <returns>ApiResponse of AppliedCouponsPaginated</returns>
        public ApiResponse<AppliedCouponsPaginated> FindAllAppliedCouponsWithHttpInfo (int? page = default(int?), int? perPage = default(int?), string status = default(string), string externalCustomerId = default(string))
        {

            var localVarPath = "/applied_coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllAppliedCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppliedCouponsPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppliedCouponsPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppliedCouponsPaginated)));
        }

        /// <summary>
        /// Find Applied Coupons Find all applied coupons
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="status">Applied coupon status (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AppliedCouponsPaginated</returns>
        public async System.Threading.Tasks.Task<AppliedCouponsPaginated> FindAllAppliedCouponsAsync (int? page = default(int?), int? perPage = default(int?), string status = default(string), string externalCustomerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AppliedCouponsPaginated> localVarResponse = await FindAllAppliedCouponsWithHttpInfoAsync(page, perPage, status, externalCustomerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Applied Coupons Find all applied coupons
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="status">Applied coupon status (optional)</param>
        /// <param name="externalCustomerId">External customer ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AppliedCouponsPaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppliedCouponsPaginated>> FindAllAppliedCouponsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), string status = default(string), string externalCustomerId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/applied_coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllAppliedCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppliedCouponsPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppliedCouponsPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppliedCouponsPaginated)));
        }

        /// <summary>
        /// Find Coupons Find all coupons in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>CouponsPaginated</returns>
        public CouponsPaginated FindAllCoupons (int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<CouponsPaginated> localVarResponse = FindAllCouponsWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Coupons Find all coupons in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of CouponsPaginated</returns>
        public ApiResponse<CouponsPaginated> FindAllCouponsWithHttpInfo (int? page = default(int?), int? perPage = default(int?))
        {

            var localVarPath = "/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CouponsPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsPaginated)));
        }

        /// <summary>
        /// Find Coupons Find all coupons in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CouponsPaginated</returns>
        public async System.Threading.Tasks.Task<CouponsPaginated> FindAllCouponsAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CouponsPaginated> localVarResponse = await FindAllCouponsWithHttpInfoAsync(page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Coupons Find all coupons in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CouponsPaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CouponsPaginated>> FindAllCouponsWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CouponsPaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CouponsPaginated) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CouponsPaginated)));
        }

        /// <summary>
        /// Find coupon by code Return a single coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <returns>Coupon</returns>
        public Coupon FindCoupon (string code)
        {
             ApiResponse<Coupon> localVarResponse = FindCouponWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find coupon by code Return a single coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <returns>ApiResponse of Coupon</returns>
        public ApiResponse<Coupon> FindCouponWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CouponsApi->FindCoupon");

            var localVarPath = "/coupons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Find coupon by code Return a single coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> FindCouponAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Coupon> localVarResponse = await FindCouponWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find coupon by code Return a single coupon
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Coupon>> FindCouponWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CouponsApi->FindCoupon");

            var localVarPath = "/coupons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Update an existing coupon Update an existing coupon by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="couponInput">Update an existing coupon</param>
        /// <returns>Coupon</returns>
        public Coupon UpdateCoupon (string code, CouponInput couponInput)
        {
             ApiResponse<Coupon> localVarResponse = UpdateCouponWithHttpInfo(code, couponInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing coupon Update an existing coupon by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="couponInput">Update an existing coupon</param>
        /// <returns>ApiResponse of Coupon</returns>
        public ApiResponse<Coupon> UpdateCouponWithHttpInfo (string code, CouponInput couponInput)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CouponsApi->UpdateCoupon");
            // verify the required parameter 'couponInput' is set
            if (couponInput == null)
                throw new ApiException(400, "Missing required parameter 'couponInput' when calling CouponsApi->UpdateCoupon");

            var localVarPath = "/coupons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (couponInput != null && couponInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Update an existing coupon Update an existing coupon by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="couponInput">Update an existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (string code, CouponInput couponInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Coupon> localVarResponse = await UpdateCouponWithHttpInfoAsync(code, couponInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing coupon Update an existing coupon by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing coupon</param>
        /// <param name="couponInput">Update an existing coupon</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Coupon>> UpdateCouponWithHttpInfoAsync (string code, CouponInput couponInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling CouponsApi->UpdateCoupon");
            // verify the required parameter 'couponInput' is set
            if (couponInput == null)
                throw new ApiException(400, "Missing required parameter 'couponInput' when calling CouponsApi->UpdateCoupon");

            var localVarPath = "/coupons/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (couponInput != null && couponInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

    }
}
