/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlansApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// Create a new plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planInput">Plan payload</param>
        /// <returns>Plan</returns>
        Plan CreatePlan (PlanInput planInput);

        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// Create a new plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planInput">Plan payload</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> CreatePlanWithHttpInfo (PlanInput planInput);
        /// <summary>
        /// Delete a plan
        /// </summary>
        /// <remarks>
        /// Delete a plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <returns>Plan</returns>
        Plan DestroyPlan (string code);

        /// <summary>
        /// Delete a plan
        /// </summary>
        /// <remarks>
        /// Delete a plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> DestroyPlanWithHttpInfo (string code);
        /// <summary>
        /// Find plans
        /// </summary>
        /// <remarks>
        /// Find all plans in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>Plans</returns>
        Plans FindAllPlans (int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Find plans
        /// </summary>
        /// <remarks>
        /// Find all plans in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of Plans</returns>
        ApiResponse<Plans> FindAllPlansWithHttpInfo (int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Fin plan by code
        /// </summary>
        /// <remarks>
        /// Return a single plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <returns>Plan</returns>
        Plan FindPlan (string code);

        /// <summary>
        /// Fin plan by code
        /// </summary>
        /// <remarks>
        /// Return a single plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> FindPlanWithHttpInfo (string code);
        /// <summary>
        /// Update an existing plan
        /// </summary>
        /// <remarks>
        /// Update an existing plan by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="planInput">Update an existing plan</param>
        /// <returns>Plan</returns>
        Plan UpdatePlan (string code, PlanInput planInput);

        /// <summary>
        /// Update an existing plan
        /// </summary>
        /// <remarks>
        /// Update an existing plan by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="planInput">Update an existing plan</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> UpdatePlanWithHttpInfo (string code, PlanInput planInput);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// Create a new plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planInput">Plan payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> CreatePlanAsync (PlanInput planInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new plan
        /// </summary>
        /// <remarks>
        /// Create a new plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planInput">Plan payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> CreatePlanWithHttpInfoAsync (PlanInput planInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a plan
        /// </summary>
        /// <remarks>
        /// Delete a plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> DestroyPlanAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a plan
        /// </summary>
        /// <remarks>
        /// Delete a plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> DestroyPlanWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find plans
        /// </summary>
        /// <remarks>
        /// Find all plans in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plans</returns>
        System.Threading.Tasks.Task<Plans> FindAllPlansAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find plans
        /// </summary>
        /// <remarks>
        /// Find all plans in certain organisation
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plans)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plans>> FindAllPlansWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Fin plan by code
        /// </summary>
        /// <remarks>
        /// Return a single plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> FindPlanAsync (string code, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fin plan by code
        /// </summary>
        /// <remarks>
        /// Return a single plan
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> FindPlanWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing plan
        /// </summary>
        /// <remarks>
        /// Update an existing plan by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="planInput">Update an existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> UpdatePlanAsync (string code, PlanInput planInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing plan
        /// </summary>
        /// <remarks>
        /// Update an existing plan by code
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="planInput">Update an existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> UpdatePlanWithHttpInfoAsync (string code, PlanInput planInput, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlansApi : IPlansApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlansApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlansApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlansApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new plan Create a new plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planInput">Plan payload</param>
        /// <returns>Plan</returns>
        public Plan CreatePlan (PlanInput planInput)
        {
             ApiResponse<Plan> localVarResponse = CreatePlanWithHttpInfo(planInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new plan Create a new plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planInput">Plan payload</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse<Plan> CreatePlanWithHttpInfo (PlanInput planInput)
        {
            // verify the required parameter 'planInput' is set
            if (planInput == null)
                throw new ApiException(400, "Missing required parameter 'planInput' when calling PlansApi->CreatePlan");

            var localVarPath = "/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (planInput != null && planInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(planInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
        }

        /// <summary>
        /// Create a new plan Create a new plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planInput">Plan payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> CreatePlanAsync (PlanInput planInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Plan> localVarResponse = await CreatePlanWithHttpInfoAsync(planInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new plan Create a new plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planInput">Plan payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> CreatePlanWithHttpInfoAsync (PlanInput planInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'planInput' is set
            if (planInput == null)
                throw new ApiException(400, "Missing required parameter 'planInput' when calling PlansApi->CreatePlan");

            var localVarPath = "/plans";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (planInput != null && planInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(planInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
        }

        /// <summary>
        /// Delete a plan Delete a plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <returns>Plan</returns>
        public Plan DestroyPlan (string code)
        {
             ApiResponse<Plan> localVarResponse = DestroyPlanWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a plan Delete a plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse<Plan> DestroyPlanWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PlansApi->DestroyPlan");

            var localVarPath = "/plans/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
        }

        /// <summary>
        /// Delete a plan Delete a plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> DestroyPlanAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Plan> localVarResponse = await DestroyPlanWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a plan Delete a plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> DestroyPlanWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PlansApi->DestroyPlan");

            var localVarPath = "/plans/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
        }

        /// <summary>
        /// Find plans Find all plans in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>Plans</returns>
        public Plans FindAllPlans (int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<Plans> localVarResponse = FindAllPlansWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find plans Find all plans in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of Plans</returns>
        public ApiResponse<Plans> FindAllPlansWithHttpInfo (int? page = default(int?), int? perPage = default(int?))
        {

            var localVarPath = "/plans/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plans>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plans) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plans)));
        }

        /// <summary>
        /// Find plans Find all plans in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plans</returns>
        public async System.Threading.Tasks.Task<Plans> FindAllPlansAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Plans> localVarResponse = await FindAllPlansWithHttpInfoAsync(page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find plans Find all plans in certain organisation
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plans)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plans>> FindAllPlansWithHttpInfoAsync (int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/plans/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllPlans", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plans>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plans) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plans)));
        }

        /// <summary>
        /// Fin plan by code Return a single plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <returns>Plan</returns>
        public Plan FindPlan (string code)
        {
             ApiResponse<Plan> localVarResponse = FindPlanWithHttpInfo(code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fin plan by code Return a single plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse<Plan> FindPlanWithHttpInfo (string code)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PlansApi->FindPlan");

            var localVarPath = "/plans/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
        }

        /// <summary>
        /// Fin plan by code Return a single plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> FindPlanAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Plan> localVarResponse = await FindPlanWithHttpInfoAsync(code, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fin plan by code Return a single plan
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> FindPlanWithHttpInfoAsync (string code, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PlansApi->FindPlan");

            var localVarPath = "/plans/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindPlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
        }

        /// <summary>
        /// Update an existing plan Update an existing plan by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="planInput">Update an existing plan</param>
        /// <returns>Plan</returns>
        public Plan UpdatePlan (string code, PlanInput planInput)
        {
             ApiResponse<Plan> localVarResponse = UpdatePlanWithHttpInfo(code, planInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing plan Update an existing plan by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="planInput">Update an existing plan</param>
        /// <returns>ApiResponse of Plan</returns>
        public ApiResponse<Plan> UpdatePlanWithHttpInfo (string code, PlanInput planInput)
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PlansApi->UpdatePlan");
            // verify the required parameter 'planInput' is set
            if (planInput == null)
                throw new ApiException(400, "Missing required parameter 'planInput' when calling PlansApi->UpdatePlan");

            var localVarPath = "/plans/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (planInput != null && planInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(planInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
        }

        /// <summary>
        /// Update an existing plan Update an existing plan by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="planInput">Update an existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> UpdatePlanAsync (string code, PlanInput planInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Plan> localVarResponse = await UpdatePlanWithHttpInfoAsync(code, planInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing plan Update an existing plan by code
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">Code of the existing plan</param>
        /// <param name="planInput">Update an existing plan</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Plan>> UpdatePlanWithHttpInfoAsync (string code, PlanInput planInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PlansApi->UpdatePlan");
            // verify the required parameter 'planInput' is set
            if (planInput == null)
                throw new ApiException(400, "Missing required parameter 'planInput' when calling PlansApi->UpdatePlan");

            var localVarPath = "/plans/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (planInput != null && planInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(planInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = planInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlan", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Plan>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Plan) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Plan)));
        }

    }
}
