/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign a plan to a customer
        /// </summary>
        /// <remarks>
        /// Assign a plan to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateInput">Subscription payload</param>
        /// <returns>Subscription</returns>
        Subscription CreateSubscription (SubscriptionCreateInput subscriptionCreateInput);

        /// <summary>
        /// Assign a plan to a customer
        /// </summary>
        /// <remarks>
        /// Assign a plan to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateInput">Subscription payload</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> CreateSubscriptionWithHttpInfo (SubscriptionCreateInput subscriptionCreateInput);
        /// <summary>
        /// Terminate a subscription
        /// </summary>
        /// <remarks>
        /// Terminate a subscription
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <returns>Subscription</returns>
        Subscription DestroySubscription (string externalId);

        /// <summary>
        /// Terminate a subscription
        /// </summary>
        /// <remarks>
        /// Terminate a subscription
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> DestroySubscriptionWithHttpInfo (string externalId);
        /// <summary>
        /// Find subscriptions
        /// </summary>
        /// <remarks>
        /// Find all suscriptions for certain customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>Subscriptions</returns>
        Subscriptions FindAllSubscriptions (string externalCustomerId, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Find subscriptions
        /// </summary>
        /// <remarks>
        /// Find all suscriptions for certain customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of Subscriptions</returns>
        ApiResponse<Subscriptions> FindAllSubscriptionsWithHttpInfo (string externalCustomerId, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Update an existing subscription
        /// </summary>
        /// <remarks>
        /// Update an existing subscription by external ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="subscriptionUpdateInput">Update an existing subscription</param>
        /// <returns>Subscription</returns>
        Subscription UpdateSubscription (string externalId, SubscriptionUpdateInput subscriptionUpdateInput);

        /// <summary>
        /// Update an existing subscription
        /// </summary>
        /// <remarks>
        /// Update an existing subscription by external ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="subscriptionUpdateInput">Update an existing subscription</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> UpdateSubscriptionWithHttpInfo (string externalId, SubscriptionUpdateInput subscriptionUpdateInput);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign a plan to a customer
        /// </summary>
        /// <remarks>
        /// Assign a plan to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateInput">Subscription payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> CreateSubscriptionAsync (SubscriptionCreateInput subscriptionCreateInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Assign a plan to a customer
        /// </summary>
        /// <remarks>
        /// Assign a plan to a customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateInput">Subscription payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> CreateSubscriptionWithHttpInfoAsync (SubscriptionCreateInput subscriptionCreateInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Terminate a subscription
        /// </summary>
        /// <remarks>
        /// Terminate a subscription
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> DestroySubscriptionAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Terminate a subscription
        /// </summary>
        /// <remarks>
        /// Terminate a subscription
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> DestroySubscriptionWithHttpInfoAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find subscriptions
        /// </summary>
        /// <remarks>
        /// Find all suscriptions for certain customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscriptions</returns>
        System.Threading.Tasks.Task<Subscriptions> FindAllSubscriptionsAsync (string externalCustomerId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find subscriptions
        /// </summary>
        /// <remarks>
        /// Find all suscriptions for certain customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscriptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscriptions>> FindAllSubscriptionsWithHttpInfoAsync (string externalCustomerId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing subscription
        /// </summary>
        /// <remarks>
        /// Update an existing subscription by external ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="subscriptionUpdateInput">Update an existing subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> UpdateSubscriptionAsync (string externalId, SubscriptionUpdateInput subscriptionUpdateInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing subscription
        /// </summary>
        /// <remarks>
        /// Update an existing subscription by external ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="subscriptionUpdateInput">Update an existing subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> UpdateSubscriptionWithHttpInfoAsync (string externalId, SubscriptionUpdateInput subscriptionUpdateInput, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : ISubscriptionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign a plan to a customer Assign a plan to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateInput">Subscription payload</param>
        /// <returns>Subscription</returns>
        public Subscription CreateSubscription (SubscriptionCreateInput subscriptionCreateInput)
        {
             ApiResponse<Subscription> localVarResponse = CreateSubscriptionWithHttpInfo(subscriptionCreateInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a plan to a customer Assign a plan to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateInput">Subscription payload</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse<Subscription> CreateSubscriptionWithHttpInfo (SubscriptionCreateInput subscriptionCreateInput)
        {
            // verify the required parameter 'subscriptionCreateInput' is set
            if (subscriptionCreateInput == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionCreateInput' when calling SubscriptionsApi->CreateSubscription");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionCreateInput != null && subscriptionCreateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscriptionCreateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscriptionCreateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Assign a plan to a customer Assign a plan to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateInput">Subscription payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> CreateSubscriptionAsync (SubscriptionCreateInput subscriptionCreateInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Subscription> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(subscriptionCreateInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign a plan to a customer Assign a plan to a customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionCreateInput">Subscription payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> CreateSubscriptionWithHttpInfoAsync (SubscriptionCreateInput subscriptionCreateInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'subscriptionCreateInput' is set
            if (subscriptionCreateInput == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionCreateInput' when calling SubscriptionsApi->CreateSubscription");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscriptionCreateInput != null && subscriptionCreateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscriptionCreateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscriptionCreateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Terminate a subscription Terminate a subscription
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <returns>Subscription</returns>
        public Subscription DestroySubscription (string externalId)
        {
             ApiResponse<Subscription> localVarResponse = DestroySubscriptionWithHttpInfo(externalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Terminate a subscription Terminate a subscription
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse<Subscription> DestroySubscriptionWithHttpInfo (string externalId)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling SubscriptionsApi->DestroySubscription");

            var localVarPath = "/subscriptions/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroySubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Terminate a subscription Terminate a subscription
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> DestroySubscriptionAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Subscription> localVarResponse = await DestroySubscriptionWithHttpInfoAsync(externalId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Terminate a subscription Terminate a subscription
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> DestroySubscriptionWithHttpInfoAsync (string externalId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling SubscriptionsApi->DestroySubscription");

            var localVarPath = "/subscriptions/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroySubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Find subscriptions Find all suscriptions for certain customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>Subscriptions</returns>
        public Subscriptions FindAllSubscriptions (string externalCustomerId, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<Subscriptions> localVarResponse = FindAllSubscriptionsWithHttpInfo(externalCustomerId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find subscriptions Find all suscriptions for certain customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of Subscriptions</returns>
        public ApiResponse<Subscriptions> FindAllSubscriptionsWithHttpInfo (string externalCustomerId, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'externalCustomerId' is set
            if (externalCustomerId == null)
                throw new ApiException(400, "Missing required parameter 'externalCustomerId' when calling SubscriptionsApi->FindAllSubscriptions");

            var localVarPath = "/subscriptions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscriptions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscriptions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscriptions)));
        }

        /// <summary>
        /// Find subscriptions Find all suscriptions for certain customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscriptions</returns>
        public async System.Threading.Tasks.Task<Subscriptions> FindAllSubscriptionsAsync (string externalCustomerId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Subscriptions> localVarResponse = await FindAllSubscriptionsWithHttpInfoAsync(externalCustomerId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find subscriptions Find all suscriptions for certain customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscriptions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscriptions>> FindAllSubscriptionsWithHttpInfoAsync (string externalCustomerId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalCustomerId' is set
            if (externalCustomerId == null)
                throw new ApiException(400, "Missing required parameter 'externalCustomerId' when calling SubscriptionsApi->FindAllSubscriptions");

            var localVarPath = "/subscriptions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllSubscriptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscriptions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscriptions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscriptions)));
        }

        /// <summary>
        /// Update an existing subscription Update an existing subscription by external ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="subscriptionUpdateInput">Update an existing subscription</param>
        /// <returns>Subscription</returns>
        public Subscription UpdateSubscription (string externalId, SubscriptionUpdateInput subscriptionUpdateInput)
        {
             ApiResponse<Subscription> localVarResponse = UpdateSubscriptionWithHttpInfo(externalId, subscriptionUpdateInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing subscription Update an existing subscription by external ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="subscriptionUpdateInput">Update an existing subscription</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse<Subscription> UpdateSubscriptionWithHttpInfo (string externalId, SubscriptionUpdateInput subscriptionUpdateInput)
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling SubscriptionsApi->UpdateSubscription");
            // verify the required parameter 'subscriptionUpdateInput' is set
            if (subscriptionUpdateInput == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUpdateInput' when calling SubscriptionsApi->UpdateSubscription");

            var localVarPath = "/subscriptions/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter
            if (subscriptionUpdateInput != null && subscriptionUpdateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscriptionUpdateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscriptionUpdateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Update an existing subscription Update an existing subscription by external ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="subscriptionUpdateInput">Update an existing subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> UpdateSubscriptionAsync (string externalId, SubscriptionUpdateInput subscriptionUpdateInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Subscription> localVarResponse = await UpdateSubscriptionWithHttpInfoAsync(externalId, subscriptionUpdateInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing subscription Update an existing subscription by external ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalId">External ID of the existing subscription</param>
        /// <param name="subscriptionUpdateInput">Update an existing subscription</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> UpdateSubscriptionWithHttpInfoAsync (string externalId, SubscriptionUpdateInput subscriptionUpdateInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalId' is set
            if (externalId == null)
                throw new ApiException(400, "Missing required parameter 'externalId' when calling SubscriptionsApi->UpdateSubscription");
            // verify the required parameter 'subscriptionUpdateInput' is set
            if (subscriptionUpdateInput == null)
                throw new ApiException(400, "Missing required parameter 'subscriptionUpdateInput' when calling SubscriptionsApi->UpdateSubscription");

            var localVarPath = "/subscriptions/{external_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalId != null) localVarPathParams.Add("external_id", this.Configuration.ApiClient.ParameterToString(externalId)); // path parameter
            if (subscriptionUpdateInput != null && subscriptionUpdateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(subscriptionUpdateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = subscriptionUpdateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSubscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

    }
}
