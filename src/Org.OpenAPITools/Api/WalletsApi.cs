/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new wallet
        /// </summary>
        /// <remarks>
        /// Create a new wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletInput">Wallet payload</param>
        /// <returns>Wallet</returns>
        Wallet CreateWallet (WalletInput walletInput);

        /// <summary>
        /// Create a new wallet
        /// </summary>
        /// <remarks>
        /// Create a new wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletInput">Wallet payload</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> CreateWalletWithHttpInfo (WalletInput walletInput);
        /// <summary>
        /// Create a new wallet transaction
        /// </summary>
        /// <remarks>
        /// Create a new wallet transaction
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionInput">Wallet transaction payload</param>
        /// <returns>WalletTransaction</returns>
        WalletTransaction CreateWalletTransaction (WalletTransactionInput walletTransactionInput);

        /// <summary>
        /// Create a new wallet transaction
        /// </summary>
        /// <remarks>
        /// Create a new wallet transaction
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionInput">Wallet transaction payload</param>
        /// <returns>ApiResponse of WalletTransaction</returns>
        ApiResponse<WalletTransaction> CreateWalletTransactionWithHttpInfo (WalletTransactionInput walletTransactionInput);
        /// <summary>
        /// Delete a wallet
        /// </summary>
        /// <remarks>
        /// Delete a wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <returns>Wallet</returns>
        Wallet DestroyWallet (string id);

        /// <summary>
        /// Delete a wallet
        /// </summary>
        /// <remarks>
        /// Delete a wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> DestroyWalletWithHttpInfo (string id);
        /// <summary>
        /// Find wallets
        /// </summary>
        /// <remarks>
        /// Find all wallets for certain customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>Wallets</returns>
        Wallets FindAllWallets (string externalCustomerId, int? page = default(int?), int? perPage = default(int?));

        /// <summary>
        /// Find wallets
        /// </summary>
        /// <remarks>
        /// Find all wallets for certain customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of Wallets</returns>
        ApiResponse<Wallets> FindAllWalletsWithHttpInfo (string externalCustomerId, int? page = default(int?), int? perPage = default(int?));
        /// <summary>
        /// Find wallet
        /// </summary>
        /// <remarks>
        /// Return a wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <returns>Wallet</returns>
        Wallet FindWallet (string id);

        /// <summary>
        /// Find wallet
        /// </summary>
        /// <remarks>
        /// Return a wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> FindWalletWithHttpInfo (string id);
        /// <summary>
        /// Update an existing wallet
        /// </summary>
        /// <remarks>
        /// Update an existing wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="walletUpdateInput">Update an existing wallet</param>
        /// <returns>Wallet</returns>
        Wallet UpdateWallet (string id, WalletUpdateInput walletUpdateInput);

        /// <summary>
        /// Update an existing wallet
        /// </summary>
        /// <remarks>
        /// Update an existing wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="walletUpdateInput">Update an existing wallet</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> UpdateWalletWithHttpInfo (string id, WalletUpdateInput walletUpdateInput);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new wallet
        /// </summary>
        /// <remarks>
        /// Create a new wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletInput">Wallet payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> CreateWalletAsync (WalletInput walletInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new wallet
        /// </summary>
        /// <remarks>
        /// Create a new wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletInput">Wallet payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> CreateWalletWithHttpInfoAsync (WalletInput walletInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new wallet transaction
        /// </summary>
        /// <remarks>
        /// Create a new wallet transaction
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionInput">Wallet transaction payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WalletTransaction</returns>
        System.Threading.Tasks.Task<WalletTransaction> CreateWalletTransactionAsync (WalletTransactionInput walletTransactionInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new wallet transaction
        /// </summary>
        /// <remarks>
        /// Create a new wallet transaction
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionInput">Wallet transaction payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WalletTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletTransaction>> CreateWalletTransactionWithHttpInfoAsync (WalletTransactionInput walletTransactionInput, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a wallet
        /// </summary>
        /// <remarks>
        /// Delete a wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> DestroyWalletAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a wallet
        /// </summary>
        /// <remarks>
        /// Delete a wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> DestroyWalletWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find wallets
        /// </summary>
        /// <remarks>
        /// Find all wallets for certain customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallets</returns>
        System.Threading.Tasks.Task<Wallets> FindAllWalletsAsync (string externalCustomerId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find wallets
        /// </summary>
        /// <remarks>
        /// Find all wallets for certain customer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallets)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallets>> FindAllWalletsWithHttpInfoAsync (string externalCustomerId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Find wallet
        /// </summary>
        /// <remarks>
        /// Return a wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> FindWalletAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Find wallet
        /// </summary>
        /// <remarks>
        /// Return a wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> FindWalletWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an existing wallet
        /// </summary>
        /// <remarks>
        /// Update an existing wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="walletUpdateInput">Update an existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> UpdateWalletAsync (string id, WalletUpdateInput walletUpdateInput, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing wallet
        /// </summary>
        /// <remarks>
        /// Update an existing wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="walletUpdateInput">Update an existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> UpdateWalletWithHttpInfoAsync (string id, WalletUpdateInput walletUpdateInput, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletsApi : IWalletsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class
        /// </summary>
        /// <returns></returns>
        public WalletsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new wallet Create a new wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletInput">Wallet payload</param>
        /// <returns>Wallet</returns>
        public Wallet CreateWallet (WalletInput walletInput)
        {
             ApiResponse<Wallet> localVarResponse = CreateWalletWithHttpInfo(walletInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new wallet Create a new wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletInput">Wallet payload</param>
        /// <returns>ApiResponse of Wallet</returns>
        public ApiResponse<Wallet> CreateWalletWithHttpInfo (WalletInput walletInput)
        {
            // verify the required parameter 'walletInput' is set
            if (walletInput == null)
                throw new ApiException(400, "Missing required parameter 'walletInput' when calling WalletsApi->CreateWallet");

            var localVarPath = "/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletInput != null && walletInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(walletInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Create a new wallet Create a new wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletInput">Wallet payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> CreateWalletAsync (WalletInput walletInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Wallet> localVarResponse = await CreateWalletWithHttpInfoAsync(walletInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new wallet Create a new wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletInput">Wallet payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> CreateWalletWithHttpInfoAsync (WalletInput walletInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'walletInput' is set
            if (walletInput == null)
                throw new ApiException(400, "Missing required parameter 'walletInput' when calling WalletsApi->CreateWallet");

            var localVarPath = "/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletInput != null && walletInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(walletInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Create a new wallet transaction Create a new wallet transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionInput">Wallet transaction payload</param>
        /// <returns>WalletTransaction</returns>
        public WalletTransaction CreateWalletTransaction (WalletTransactionInput walletTransactionInput)
        {
             ApiResponse<WalletTransaction> localVarResponse = CreateWalletTransactionWithHttpInfo(walletTransactionInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new wallet transaction Create a new wallet transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionInput">Wallet transaction payload</param>
        /// <returns>ApiResponse of WalletTransaction</returns>
        public ApiResponse<WalletTransaction> CreateWalletTransactionWithHttpInfo (WalletTransactionInput walletTransactionInput)
        {
            // verify the required parameter 'walletTransactionInput' is set
            if (walletTransactionInput == null)
                throw new ApiException(400, "Missing required parameter 'walletTransactionInput' when calling WalletsApi->CreateWalletTransaction");

            var localVarPath = "/wallet_transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletTransactionInput != null && walletTransactionInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(walletTransactionInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletTransactionInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWalletTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletTransaction)));
        }

        /// <summary>
        /// Create a new wallet transaction Create a new wallet transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionInput">Wallet transaction payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WalletTransaction</returns>
        public async System.Threading.Tasks.Task<WalletTransaction> CreateWalletTransactionAsync (WalletTransactionInput walletTransactionInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WalletTransaction> localVarResponse = await CreateWalletTransactionWithHttpInfoAsync(walletTransactionInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new wallet transaction Create a new wallet transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionInput">Wallet transaction payload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WalletTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletTransaction>> CreateWalletTransactionWithHttpInfoAsync (WalletTransactionInput walletTransactionInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'walletTransactionInput' is set
            if (walletTransactionInput == null)
                throw new ApiException(400, "Missing required parameter 'walletTransactionInput' when calling WalletsApi->CreateWalletTransaction");

            var localVarPath = "/wallet_transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletTransactionInput != null && walletTransactionInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(walletTransactionInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletTransactionInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWalletTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletTransaction)));
        }

        /// <summary>
        /// Delete a wallet Delete a wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <returns>Wallet</returns>
        public Wallet DestroyWallet (string id)
        {
             ApiResponse<Wallet> localVarResponse = DestroyWalletWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a wallet Delete a wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <returns>ApiResponse of Wallet</returns>
        public ApiResponse<Wallet> DestroyWalletWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WalletsApi->DestroyWallet");

            var localVarPath = "/wallets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Delete a wallet Delete a wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> DestroyWalletAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Wallet> localVarResponse = await DestroyWalletWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a wallet Delete a wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> DestroyWalletWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WalletsApi->DestroyWallet");

            var localVarPath = "/wallets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Find wallets Find all wallets for certain customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>Wallets</returns>
        public Wallets FindAllWallets (string externalCustomerId, int? page = default(int?), int? perPage = default(int?))
        {
             ApiResponse<Wallets> localVarResponse = FindAllWalletsWithHttpInfo(externalCustomerId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find wallets Find all wallets for certain customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <returns>ApiResponse of Wallets</returns>
        public ApiResponse<Wallets> FindAllWalletsWithHttpInfo (string externalCustomerId, int? page = default(int?), int? perPage = default(int?))
        {
            // verify the required parameter 'externalCustomerId' is set
            if (externalCustomerId == null)
                throw new ApiException(400, "Missing required parameter 'externalCustomerId' when calling WalletsApi->FindAllWallets");

            var localVarPath = "/wallets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllWallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallets)));
        }

        /// <summary>
        /// Find wallets Find all wallets for certain customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallets</returns>
        public async System.Threading.Tasks.Task<Wallets> FindAllWalletsAsync (string externalCustomerId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Wallets> localVarResponse = await FindAllWalletsWithHttpInfoAsync(externalCustomerId, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find wallets Find all wallets for certain customer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalCustomerId">External customer ID</param>
        /// <param name="page">Number of page (optional)</param>
        /// <param name="perPage">Number of records per page (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallets)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallets>> FindAllWalletsWithHttpInfoAsync (string externalCustomerId, int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'externalCustomerId' is set
            if (externalCustomerId == null)
                throw new ApiException(400, "Missing required parameter 'externalCustomerId' when calling WalletsApi->FindAllWallets");

            var localVarPath = "/wallets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (externalCustomerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "external_customer_id", externalCustomerId)); // query parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllWallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallets)));
        }

        /// <summary>
        /// Find wallet Return a wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <returns>Wallet</returns>
        public Wallet FindWallet (string id)
        {
             ApiResponse<Wallet> localVarResponse = FindWalletWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find wallet Return a wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <returns>ApiResponse of Wallet</returns>
        public ApiResponse<Wallet> FindWalletWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WalletsApi->FindWallet");

            var localVarPath = "/wallets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Find wallet Return a wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> FindWalletAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Wallet> localVarResponse = await FindWalletWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find wallet Return a wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> FindWalletWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WalletsApi->FindWallet");

            var localVarPath = "/wallets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Update an existing wallet Update an existing wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="walletUpdateInput">Update an existing wallet</param>
        /// <returns>Wallet</returns>
        public Wallet UpdateWallet (string id, WalletUpdateInput walletUpdateInput)
        {
             ApiResponse<Wallet> localVarResponse = UpdateWalletWithHttpInfo(id, walletUpdateInput);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing wallet Update an existing wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="walletUpdateInput">Update an existing wallet</param>
        /// <returns>ApiResponse of Wallet</returns>
        public ApiResponse<Wallet> UpdateWalletWithHttpInfo (string id, WalletUpdateInput walletUpdateInput)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WalletsApi->UpdateWallet");
            // verify the required parameter 'walletUpdateInput' is set
            if (walletUpdateInput == null)
                throw new ApiException(400, "Missing required parameter 'walletUpdateInput' when calling WalletsApi->UpdateWallet");

            var localVarPath = "/wallets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (walletUpdateInput != null && walletUpdateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(walletUpdateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletUpdateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Update an existing wallet Update an existing wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="walletUpdateInput">Update an existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> UpdateWalletAsync (string id, WalletUpdateInput walletUpdateInput, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Wallet> localVarResponse = await UpdateWalletWithHttpInfoAsync(id, walletUpdateInput, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing wallet Update an existing wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Lago ID of the existing wallet</param>
        /// <param name="walletUpdateInput">Update an existing wallet</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> UpdateWalletWithHttpInfoAsync (string id, WalletUpdateInput walletUpdateInput, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WalletsApi->UpdateWallet");
            // verify the required parameter 'walletUpdateInput' is set
            if (walletUpdateInput == null)
                throw new ApiException(400, "Missing required parameter 'walletUpdateInput' when calling WalletsApi->UpdateWallet");

            var localVarPath = "/wallets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (walletUpdateInput != null && walletUpdateInput.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(walletUpdateInput); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletUpdateInput; // byte array
            }

            // authentication (bearerAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

    }
}
