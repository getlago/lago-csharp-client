/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.21.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AppliedCouponObject
    /// </summary>
    [DataContract]
    public partial class AppliedCouponObject :  IEquatable<AppliedCouponObject>, IValidatableObject
    {
        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Terminated for value: terminated
            /// </summary>
            [EnumMember(Value = "terminated")]
            Terminated = 2

        }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Frequency type
        /// </summary>
        /// <value>Frequency type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum Once for value: once
            /// </summary>
            [EnumMember(Value = "once")]
            Once = 1,

            /// <summary>
            /// Enum Recurring for value: recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            Recurring = 2

        }

        /// <summary>
        /// Frequency type
        /// </summary>
        /// <value>Frequency type</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public FrequencyEnum? Frequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppliedCouponObject" /> class.
        /// </summary>
        /// <param name="lagoId">lagoId.</param>
        /// <param name="lagoCouponId">lagoCouponId.</param>
        /// <param name="couponCode">couponCode.</param>
        /// <param name="lagoCustomerId">lagoCustomerId.</param>
        /// <param name="externalCustomerId">externalCustomerId.</param>
        /// <param name="status">Status.</param>
        /// <param name="amountCents">amountCents.</param>
        /// <param name="amountCentsRemaining">amountCentsRemaining.</param>
        /// <param name="amountCurrency">amountCurrency.</param>
        /// <param name="percentageRate">percentageRate.</param>
        /// <param name="frequency">Frequency type.</param>
        /// <param name="frequencyDuration">frequencyDuration.</param>
        /// <param name="frequencyDurationRemaining">frequencyDurationRemaining.</param>
        /// <param name="expirationAt">expirationAt.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="terminatedAt">terminatedAt.</param>
        public AppliedCouponObject(string lagoId = default(string), string lagoCouponId = default(string), string couponCode = default(string), string lagoCustomerId = default(string), string externalCustomerId = default(string), StatusEnum? status = default(StatusEnum?), int amountCents = default(int), int amountCentsRemaining = default(int), string amountCurrency = default(string), decimal percentageRate = default(decimal), FrequencyEnum? frequency = default(FrequencyEnum?), int frequencyDuration = default(int), int frequencyDurationRemaining = default(int), string expirationAt = default(string), string createdAt = default(string), string terminatedAt = default(string))
        {
            this.LagoId = lagoId;
            this.LagoCouponId = lagoCouponId;
            this.CouponCode = couponCode;
            this.LagoCustomerId = lagoCustomerId;
            this.ExternalCustomerId = externalCustomerId;
            this.Status = status;
            this.AmountCents = amountCents;
            this.AmountCentsRemaining = amountCentsRemaining;
            this.AmountCurrency = amountCurrency;
            this.PercentageRate = percentageRate;
            this.Frequency = frequency;
            this.FrequencyDuration = frequencyDuration;
            this.FrequencyDurationRemaining = frequencyDurationRemaining;
            this.ExpirationAt = expirationAt;
            this.CreatedAt = createdAt;
            this.TerminatedAt = terminatedAt;
        }

        /// <summary>
        /// Gets or Sets LagoId
        /// </summary>
        [DataMember(Name="lago_id", EmitDefaultValue=false)]
        public string LagoId { get; set; }

        /// <summary>
        /// Gets or Sets LagoCouponId
        /// </summary>
        [DataMember(Name="lago_coupon_id", EmitDefaultValue=false)]
        public string LagoCouponId { get; set; }

        /// <summary>
        /// Gets or Sets CouponCode
        /// </summary>
        [DataMember(Name="coupon_code", EmitDefaultValue=false)]
        public string CouponCode { get; set; }

        /// <summary>
        /// Gets or Sets LagoCustomerId
        /// </summary>
        [DataMember(Name="lago_customer_id", EmitDefaultValue=false)]
        public string LagoCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCustomerId
        /// </summary>
        [DataMember(Name="external_customer_id", EmitDefaultValue=false)]
        public string ExternalCustomerId { get; set; }


        /// <summary>
        /// Gets or Sets AmountCents
        /// </summary>
        [DataMember(Name="amount_cents", EmitDefaultValue=false)]
        public int AmountCents { get; set; }

        /// <summary>
        /// Gets or Sets AmountCentsRemaining
        /// </summary>
        [DataMember(Name="amount_cents_remaining", EmitDefaultValue=false)]
        public int AmountCentsRemaining { get; set; }

        /// <summary>
        /// Gets or Sets AmountCurrency
        /// </summary>
        [DataMember(Name="amount_currency", EmitDefaultValue=false)]
        public string AmountCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PercentageRate
        /// </summary>
        [DataMember(Name="percentage_rate", EmitDefaultValue=false)]
        public decimal PercentageRate { get; set; }


        /// <summary>
        /// Gets or Sets FrequencyDuration
        /// </summary>
        [DataMember(Name="frequency_duration", EmitDefaultValue=false)]
        public int FrequencyDuration { get; set; }

        /// <summary>
        /// Gets or Sets FrequencyDurationRemaining
        /// </summary>
        [DataMember(Name="frequency_duration_remaining", EmitDefaultValue=false)]
        public int FrequencyDurationRemaining { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationAt
        /// </summary>
        [DataMember(Name="expiration_at", EmitDefaultValue=false)]
        public string ExpirationAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TerminatedAt
        /// </summary>
        [DataMember(Name="terminated_at", EmitDefaultValue=false)]
        public string TerminatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppliedCouponObject {\n");
            sb.Append("  LagoId: ").Append(LagoId).Append("\n");
            sb.Append("  LagoCouponId: ").Append(LagoCouponId).Append("\n");
            sb.Append("  CouponCode: ").Append(CouponCode).Append("\n");
            sb.Append("  LagoCustomerId: ").Append(LagoCustomerId).Append("\n");
            sb.Append("  ExternalCustomerId: ").Append(ExternalCustomerId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AmountCents: ").Append(AmountCents).Append("\n");
            sb.Append("  AmountCentsRemaining: ").Append(AmountCentsRemaining).Append("\n");
            sb.Append("  AmountCurrency: ").Append(AmountCurrency).Append("\n");
            sb.Append("  PercentageRate: ").Append(PercentageRate).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  FrequencyDuration: ").Append(FrequencyDuration).Append("\n");
            sb.Append("  FrequencyDurationRemaining: ").Append(FrequencyDurationRemaining).Append("\n");
            sb.Append("  ExpirationAt: ").Append(ExpirationAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  TerminatedAt: ").Append(TerminatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppliedCouponObject);
        }

        /// <summary>
        /// Returns true if AppliedCouponObject instances are equal
        /// </summary>
        /// <param name="input">Instance of AppliedCouponObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppliedCouponObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LagoId == input.LagoId ||
                    (this.LagoId != null &&
                    this.LagoId.Equals(input.LagoId))
                ) && 
                (
                    this.LagoCouponId == input.LagoCouponId ||
                    (this.LagoCouponId != null &&
                    this.LagoCouponId.Equals(input.LagoCouponId))
                ) && 
                (
                    this.CouponCode == input.CouponCode ||
                    (this.CouponCode != null &&
                    this.CouponCode.Equals(input.CouponCode))
                ) && 
                (
                    this.LagoCustomerId == input.LagoCustomerId ||
                    (this.LagoCustomerId != null &&
                    this.LagoCustomerId.Equals(input.LagoCustomerId))
                ) && 
                (
                    this.ExternalCustomerId == input.ExternalCustomerId ||
                    (this.ExternalCustomerId != null &&
                    this.ExternalCustomerId.Equals(input.ExternalCustomerId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.AmountCents == input.AmountCents ||
                    (this.AmountCents != null &&
                    this.AmountCents.Equals(input.AmountCents))
                ) && 
                (
                    this.AmountCentsRemaining == input.AmountCentsRemaining ||
                    (this.AmountCentsRemaining != null &&
                    this.AmountCentsRemaining.Equals(input.AmountCentsRemaining))
                ) && 
                (
                    this.AmountCurrency == input.AmountCurrency ||
                    (this.AmountCurrency != null &&
                    this.AmountCurrency.Equals(input.AmountCurrency))
                ) && 
                (
                    this.PercentageRate == input.PercentageRate ||
                    (this.PercentageRate != null &&
                    this.PercentageRate.Equals(input.PercentageRate))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.FrequencyDuration == input.FrequencyDuration ||
                    (this.FrequencyDuration != null &&
                    this.FrequencyDuration.Equals(input.FrequencyDuration))
                ) && 
                (
                    this.FrequencyDurationRemaining == input.FrequencyDurationRemaining ||
                    (this.FrequencyDurationRemaining != null &&
                    this.FrequencyDurationRemaining.Equals(input.FrequencyDurationRemaining))
                ) && 
                (
                    this.ExpirationAt == input.ExpirationAt ||
                    (this.ExpirationAt != null &&
                    this.ExpirationAt.Equals(input.ExpirationAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.TerminatedAt == input.TerminatedAt ||
                    (this.TerminatedAt != null &&
                    this.TerminatedAt.Equals(input.TerminatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LagoId != null)
                    hashCode = hashCode * 59 + this.LagoId.GetHashCode();
                if (this.LagoCouponId != null)
                    hashCode = hashCode * 59 + this.LagoCouponId.GetHashCode();
                if (this.CouponCode != null)
                    hashCode = hashCode * 59 + this.CouponCode.GetHashCode();
                if (this.LagoCustomerId != null)
                    hashCode = hashCode * 59 + this.LagoCustomerId.GetHashCode();
                if (this.ExternalCustomerId != null)
                    hashCode = hashCode * 59 + this.ExternalCustomerId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.AmountCents != null)
                    hashCode = hashCode * 59 + this.AmountCents.GetHashCode();
                if (this.AmountCentsRemaining != null)
                    hashCode = hashCode * 59 + this.AmountCentsRemaining.GetHashCode();
                if (this.AmountCurrency != null)
                    hashCode = hashCode * 59 + this.AmountCurrency.GetHashCode();
                if (this.PercentageRate != null)
                    hashCode = hashCode * 59 + this.PercentageRate.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.FrequencyDuration != null)
                    hashCode = hashCode * 59 + this.FrequencyDuration.GetHashCode();
                if (this.FrequencyDurationRemaining != null)
                    hashCode = hashCode * 59 + this.FrequencyDurationRemaining.GetHashCode();
                if (this.ExpirationAt != null)
                    hashCode = hashCode * 59 + this.ExpirationAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.TerminatedAt != null)
                    hashCode = hashCode * 59 + this.TerminatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
