/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.36.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PaginationMeta
    /// </summary>
    [DataContract(Name = "PaginationMeta")]
    public partial class PaginationMeta : IEquatable<PaginationMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginationMeta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaginationMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginationMeta" /> class.
        /// </summary>
        /// <param name="currentPage">Current page (required).</param>
        /// <param name="nextPage">Next page.</param>
        /// <param name="prevPage">Previous page.</param>
        /// <param name="totalPages">Total number of pages (required).</param>
        /// <param name="totalCount">Total number of records (required).</param>
        public PaginationMeta(int currentPage = default(int), int nextPage = default(int), int prevPage = default(int), int totalPages = default(int), int totalCount = default(int))
        {
            this.CurrentPage = currentPage;
            this.TotalPages = totalPages;
            this.TotalCount = totalCount;
            this.NextPage = nextPage;
            this.PrevPage = prevPage;
        }

        /// <summary>
        /// Current page
        /// </summary>
        /// <value>Current page</value>
        [DataMember(Name = "current_page", IsRequired = true, EmitDefaultValue = true)]
        public int CurrentPage { get; set; }

        /// <summary>
        /// Next page
        /// </summary>
        /// <value>Next page</value>
        [DataMember(Name = "next_page", EmitDefaultValue = false)]
        public int NextPage { get; set; }

        /// <summary>
        /// Previous page
        /// </summary>
        /// <value>Previous page</value>
        [DataMember(Name = "prev_page", EmitDefaultValue = false)]
        public int PrevPage { get; set; }

        /// <summary>
        /// Total number of pages
        /// </summary>
        /// <value>Total number of pages</value>
        [DataMember(Name = "total_pages", IsRequired = true, EmitDefaultValue = true)]
        public int TotalPages { get; set; }

        /// <summary>
        /// Total number of records
        /// </summary>
        /// <value>Total number of records</value>
        [DataMember(Name = "total_count", IsRequired = true, EmitDefaultValue = true)]
        public int TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaginationMeta {\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  PrevPage: ").Append(PrevPage).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaginationMeta);
        }

        /// <summary>
        /// Returns true if PaginationMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of PaginationMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaginationMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrentPage == input.CurrentPage ||
                    this.CurrentPage.Equals(input.CurrentPage)
                ) && 
                (
                    this.NextPage == input.NextPage ||
                    this.NextPage.Equals(input.NextPage)
                ) && 
                (
                    this.PrevPage == input.PrevPage ||
                    this.PrevPage.Equals(input.PrevPage)
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    this.TotalPages.Equals(input.TotalPages)
                ) && 
                (
                    this.TotalCount == input.TotalCount ||
                    this.TotalCount.Equals(input.TotalCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CurrentPage.GetHashCode();
                hashCode = (hashCode * 59) + this.NextPage.GetHashCode();
                hashCode = (hashCode * 59) + this.PrevPage.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalPages.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
