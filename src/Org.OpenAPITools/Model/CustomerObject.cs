/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.36.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustomerObject
    /// </summary>
    [DataContract(Name = "CustomerObject")]
    public partial class CustomerObject : IEquatable<CustomerObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerObject" /> class.
        /// </summary>
        /// <param name="lagoId">lagoId (required).</param>
        /// <param name="externalId">externalId (required).</param>
        /// <param name="name">name.</param>
        /// <param name="sequentialId">sequentialId (required).</param>
        /// <param name="slug">slug (required).</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="country">country.</param>
        /// <param name="addressLine1">addressLine1.</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="state">state.</param>
        /// <param name="zipcode">zipcode.</param>
        /// <param name="email">email.</param>
        /// <param name="city">city.</param>
        /// <param name="url">url.</param>
        /// <param name="phone">phone.</param>
        /// <param name="lagoUrl">lagoUrl.</param>
        /// <param name="legalName">legalName.</param>
        /// <param name="legalNumber">legalNumber.</param>
        /// <param name="taxIdentificationNumber">taxIdentificationNumber.</param>
        /// <param name="currency">currency.</param>
        /// <param name="timezone">timezone.</param>
        /// <param name="applicableTimezone">applicableTimezone.</param>
        /// <param name="billingConfiguration">billingConfiguration.</param>
        /// <param name="metadata">metadata.</param>
        public CustomerObject(Guid lagoId = default(Guid), string externalId = default(string), string name = default(string), int sequentialId = default(int), string slug = default(string), DateTime createdAt = default(DateTime), string country = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string state = default(string), string zipcode = default(string), string email = default(string), string city = default(string), string url = default(string), string phone = default(string), string lagoUrl = default(string), string legalName = default(string), string legalNumber = default(string), string taxIdentificationNumber = default(string), string currency = default(string), string timezone = default(string), string applicableTimezone = default(string), BillingConfigurationCustomer billingConfiguration = default(BillingConfigurationCustomer), List<CustomerMetadataObject> metadata = default(List<CustomerMetadataObject>))
        {
            this.LagoId = lagoId;
            // to ensure "externalId" is required (not null)
            if (externalId == null)
            {
                throw new ArgumentNullException("externalId is a required property for CustomerObject and cannot be null");
            }
            this.ExternalId = externalId;
            this.SequentialId = sequentialId;
            // to ensure "slug" is required (not null)
            if (slug == null)
            {
                throw new ArgumentNullException("slug is a required property for CustomerObject and cannot be null");
            }
            this.Slug = slug;
            this.Name = name;
            this.CreatedAt = createdAt;
            this.Country = country;
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.State = state;
            this.Zipcode = zipcode;
            this.Email = email;
            this.City = city;
            this.Url = url;
            this.Phone = phone;
            this.LagoUrl = lagoUrl;
            this.LegalName = legalName;
            this.LegalNumber = legalNumber;
            this.TaxIdentificationNumber = taxIdentificationNumber;
            this.Currency = currency;
            this.Timezone = timezone;
            this.ApplicableTimezone = applicableTimezone;
            this.BillingConfiguration = billingConfiguration;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets LagoId
        /// </summary>
        /// <example>1a901a90-1a90-1a90-1a90-1a901a901a90</example>
        [DataMember(Name = "lago_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid LagoId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        /// <example>12345</example>
        [DataMember(Name = "external_id", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>John Doe</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SequentialId
        /// </summary>
        /// <example>12345</example>
        [DataMember(Name = "sequential_id", IsRequired = true, EmitDefaultValue = true)]
        public int SequentialId { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        /// <example>slug</example>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = true)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2022-09-14T16:35:31Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        /// <example>CZ</example>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        /// <example>address1</example>
        [DataMember(Name = "address_line1", EmitDefaultValue = false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        /// <example>address2</example>
        [DataMember(Name = "address_line2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        /// <example>state1</example>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Zipcode
        /// </summary>
        /// <example>10000</example>
        [DataMember(Name = "zipcode", EmitDefaultValue = false)]
        public string Zipcode { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        /// <example>example@example.com</example>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        /// <example>City</example>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        /// <example>https://example.com</example>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        /// <example>+3551234567</example>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets LagoUrl
        /// </summary>
        /// <example>https://lago.url</example>
        [DataMember(Name = "lago_url", EmitDefaultValue = false)]
        public string LagoUrl { get; set; }

        /// <summary>
        /// Gets or Sets LegalName
        /// </summary>
        /// <example>name1</example>
        [DataMember(Name = "legal_name", EmitDefaultValue = false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Gets or Sets LegalNumber
        /// </summary>
        /// <example>10000</example>
        [DataMember(Name = "legal_number", EmitDefaultValue = false)]
        public string LegalNumber { get; set; }

        /// <summary>
        /// Gets or Sets TaxIdentificationNumber
        /// </summary>
        /// <example>EU123456789</example>
        [DataMember(Name = "tax_identification_number", EmitDefaultValue = false)]
        public string TaxIdentificationNumber { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        /// <example>EUR</example>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        /// <example>UTC</example>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets ApplicableTimezone
        /// </summary>
        /// <example>UTC</example>
        [DataMember(Name = "applicable_timezone", EmitDefaultValue = false)]
        public string ApplicableTimezone { get; set; }

        /// <summary>
        /// Gets or Sets BillingConfiguration
        /// </summary>
        [DataMember(Name = "billing_configuration", EmitDefaultValue = false)]
        public BillingConfigurationCustomer BillingConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public List<CustomerMetadataObject> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerObject {\n");
            sb.Append("  LagoId: ").Append(LagoId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SequentialId: ").Append(SequentialId).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  LagoUrl: ").Append(LagoUrl).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  LegalNumber: ").Append(LegalNumber).Append("\n");
            sb.Append("  TaxIdentificationNumber: ").Append(TaxIdentificationNumber).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  ApplicableTimezone: ").Append(ApplicableTimezone).Append("\n");
            sb.Append("  BillingConfiguration: ").Append(BillingConfiguration).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerObject);
        }

        /// <summary>
        /// Returns true if CustomerObject instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LagoId == input.LagoId ||
                    (this.LagoId != null &&
                    this.LagoId.Equals(input.LagoId))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SequentialId == input.SequentialId ||
                    this.SequentialId.Equals(input.SequentialId)
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.LagoUrl == input.LagoUrl ||
                    (this.LagoUrl != null &&
                    this.LagoUrl.Equals(input.LagoUrl))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.LegalNumber == input.LegalNumber ||
                    (this.LegalNumber != null &&
                    this.LegalNumber.Equals(input.LegalNumber))
                ) && 
                (
                    this.TaxIdentificationNumber == input.TaxIdentificationNumber ||
                    (this.TaxIdentificationNumber != null &&
                    this.TaxIdentificationNumber.Equals(input.TaxIdentificationNumber))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.ApplicableTimezone == input.ApplicableTimezone ||
                    (this.ApplicableTimezone != null &&
                    this.ApplicableTimezone.Equals(input.ApplicableTimezone))
                ) && 
                (
                    this.BillingConfiguration == input.BillingConfiguration ||
                    (this.BillingConfiguration != null &&
                    this.BillingConfiguration.Equals(input.BillingConfiguration))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LagoId != null)
                {
                    hashCode = (hashCode * 59) + this.LagoId.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SequentialId.GetHashCode();
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.AddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine1.GetHashCode();
                }
                if (this.AddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine2.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Zipcode != null)
                {
                    hashCode = (hashCode * 59) + this.Zipcode.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.LagoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LagoUrl.GetHashCode();
                }
                if (this.LegalName != null)
                {
                    hashCode = (hashCode * 59) + this.LegalName.GetHashCode();
                }
                if (this.LegalNumber != null)
                {
                    hashCode = (hashCode * 59) + this.LegalNumber.GetHashCode();
                }
                if (this.TaxIdentificationNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TaxIdentificationNumber.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                if (this.ApplicableTimezone != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicableTimezone.GetHashCode();
                }
                if (this.BillingConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.BillingConfiguration.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
