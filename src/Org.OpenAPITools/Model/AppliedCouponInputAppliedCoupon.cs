/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AppliedCouponInputAppliedCoupon
    /// </summary>
    [DataContract]
    public partial class AppliedCouponInputAppliedCoupon :  IEquatable<AppliedCouponInputAppliedCoupon>, IValidatableObject
    {
        /// <summary>
        /// Frequency type
        /// </summary>
        /// <value>Frequency type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum Once for value: once
            /// </summary>
            [EnumMember(Value = "once")]
            Once = 1,

            /// <summary>
            /// Enum Recurring for value: recurring
            /// </summary>
            [EnumMember(Value = "recurring")]
            Recurring = 2

        }

        /// <summary>
        /// Frequency type
        /// </summary>
        /// <value>Frequency type</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public FrequencyEnum? Frequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppliedCouponInputAppliedCoupon" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AppliedCouponInputAppliedCoupon() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AppliedCouponInputAppliedCoupon" /> class.
        /// </summary>
        /// <param name="externalCustomerId">externalCustomerId (required).</param>
        /// <param name="couponCode">couponCode (required).</param>
        /// <param name="frequency">Frequency type.</param>
        /// <param name="frequencyDuration">frequencyDuration.</param>
        /// <param name="amountCents">amountCents.</param>
        /// <param name="amountCurrency">amountCurrency.</param>
        /// <param name="percentageRate">percentageRate.</param>
        public AppliedCouponInputAppliedCoupon(string externalCustomerId = default(string), string couponCode = default(string), FrequencyEnum? frequency = default(FrequencyEnum?), int frequencyDuration = default(int), int amountCents = default(int), string amountCurrency = default(string), decimal percentageRate = default(decimal))
        {
            // to ensure "externalCustomerId" is required (not null)
            if (externalCustomerId == null)
            {
                throw new InvalidDataException("externalCustomerId is a required property for AppliedCouponInputAppliedCoupon and cannot be null");
            }
            else
            {
                this.ExternalCustomerId = externalCustomerId;
            }

            // to ensure "couponCode" is required (not null)
            if (couponCode == null)
            {
                throw new InvalidDataException("couponCode is a required property for AppliedCouponInputAppliedCoupon and cannot be null");
            }
            else
            {
                this.CouponCode = couponCode;
            }

            this.Frequency = frequency;
            this.FrequencyDuration = frequencyDuration;
            this.AmountCents = amountCents;
            this.AmountCurrency = amountCurrency;
            this.PercentageRate = percentageRate;
        }

        /// <summary>
        /// Gets or Sets ExternalCustomerId
        /// </summary>
        [DataMember(Name="external_customer_id", EmitDefaultValue=true)]
        public string ExternalCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets CouponCode
        /// </summary>
        [DataMember(Name="coupon_code", EmitDefaultValue=true)]
        public string CouponCode { get; set; }


        /// <summary>
        /// Gets or Sets FrequencyDuration
        /// </summary>
        [DataMember(Name="frequency_duration", EmitDefaultValue=false)]
        public int FrequencyDuration { get; set; }

        /// <summary>
        /// Gets or Sets AmountCents
        /// </summary>
        [DataMember(Name="amount_cents", EmitDefaultValue=false)]
        public int AmountCents { get; set; }

        /// <summary>
        /// Gets or Sets AmountCurrency
        /// </summary>
        [DataMember(Name="amount_currency", EmitDefaultValue=false)]
        public string AmountCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PercentageRate
        /// </summary>
        [DataMember(Name="percentage_rate", EmitDefaultValue=false)]
        public decimal PercentageRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppliedCouponInputAppliedCoupon {\n");
            sb.Append("  ExternalCustomerId: ").Append(ExternalCustomerId).Append("\n");
            sb.Append("  CouponCode: ").Append(CouponCode).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  FrequencyDuration: ").Append(FrequencyDuration).Append("\n");
            sb.Append("  AmountCents: ").Append(AmountCents).Append("\n");
            sb.Append("  AmountCurrency: ").Append(AmountCurrency).Append("\n");
            sb.Append("  PercentageRate: ").Append(PercentageRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppliedCouponInputAppliedCoupon);
        }

        /// <summary>
        /// Returns true if AppliedCouponInputAppliedCoupon instances are equal
        /// </summary>
        /// <param name="input">Instance of AppliedCouponInputAppliedCoupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppliedCouponInputAppliedCoupon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalCustomerId == input.ExternalCustomerId ||
                    (this.ExternalCustomerId != null &&
                    this.ExternalCustomerId.Equals(input.ExternalCustomerId))
                ) && 
                (
                    this.CouponCode == input.CouponCode ||
                    (this.CouponCode != null &&
                    this.CouponCode.Equals(input.CouponCode))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.FrequencyDuration == input.FrequencyDuration ||
                    (this.FrequencyDuration != null &&
                    this.FrequencyDuration.Equals(input.FrequencyDuration))
                ) && 
                (
                    this.AmountCents == input.AmountCents ||
                    (this.AmountCents != null &&
                    this.AmountCents.Equals(input.AmountCents))
                ) && 
                (
                    this.AmountCurrency == input.AmountCurrency ||
                    (this.AmountCurrency != null &&
                    this.AmountCurrency.Equals(input.AmountCurrency))
                ) && 
                (
                    this.PercentageRate == input.PercentageRate ||
                    (this.PercentageRate != null &&
                    this.PercentageRate.Equals(input.PercentageRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalCustomerId != null)
                    hashCode = hashCode * 59 + this.ExternalCustomerId.GetHashCode();
                if (this.CouponCode != null)
                    hashCode = hashCode * 59 + this.CouponCode.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.FrequencyDuration != null)
                    hashCode = hashCode * 59 + this.FrequencyDuration.GetHashCode();
                if (this.AmountCents != null)
                    hashCode = hashCode * 59 + this.AmountCents.GetHashCode();
                if (this.AmountCurrency != null)
                    hashCode = hashCode * 59 + this.AmountCurrency.GetHashCode();
                if (this.PercentageRate != null)
                    hashCode = hashCode * 59 + this.PercentageRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
