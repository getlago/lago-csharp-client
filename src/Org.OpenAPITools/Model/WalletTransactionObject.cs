/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WalletTransactionObject
    /// </summary>
    [DataContract]
    public partial class WalletTransactionObject :  IEquatable<WalletTransactionObject>, IValidatableObject
    {
        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Settled for value: settled
            /// </summary>
            [EnumMember(Value = "settled")]
            Settled = 2

        }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Transaction type
        /// </summary>
        /// <value>Transaction type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            /// <summary>
            /// Enum Inbound for value: inbound
            /// </summary>
            [EnumMember(Value = "inbound")]
            Inbound = 1,

            /// <summary>
            /// Enum Outbound for value: outbound
            /// </summary>
            [EnumMember(Value = "outbound")]
            Outbound = 2

        }

        /// <summary>
        /// Transaction type
        /// </summary>
        /// <value>Transaction type</value>
        [DataMember(Name="transaction_type", EmitDefaultValue=true)]
        public TransactionTypeEnum TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTransactionObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WalletTransactionObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTransactionObject" /> class.
        /// </summary>
        /// <param name="lagoId">lagoId (required).</param>
        /// <param name="lagoWalletId">lagoWalletId (required).</param>
        /// <param name="status">Status (required).</param>
        /// <param name="transactionType">Transaction type (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="creditAmount">creditAmount (required).</param>
        /// <param name="settledAt">settledAt.</param>
        /// <param name="createdAt">createdAt (required).</param>
        public WalletTransactionObject(Guid lagoId = default(Guid), Guid lagoWalletId = default(Guid), StatusEnum status = default(StatusEnum), TransactionTypeEnum transactionType = default(TransactionTypeEnum), decimal amount = default(decimal), decimal creditAmount = default(decimal), DateTime settledAt = default(DateTime), DateTime createdAt = default(DateTime))
        {
            // to ensure "lagoId" is required (not null)
            if (lagoId == null)
            {
                throw new InvalidDataException("lagoId is a required property for WalletTransactionObject and cannot be null");
            }
            else
            {
                this.LagoId = lagoId;
            }

            // to ensure "lagoWalletId" is required (not null)
            if (lagoWalletId == null)
            {
                throw new InvalidDataException("lagoWalletId is a required property for WalletTransactionObject and cannot be null");
            }
            else
            {
                this.LagoWalletId = lagoWalletId;
            }

            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for WalletTransactionObject and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "transactionType" is required (not null)
            if (transactionType == null)
            {
                throw new InvalidDataException("transactionType is a required property for WalletTransactionObject and cannot be null");
            }
            else
            {
                this.TransactionType = transactionType;
            }

            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for WalletTransactionObject and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }

            // to ensure "creditAmount" is required (not null)
            if (creditAmount == null)
            {
                throw new InvalidDataException("creditAmount is a required property for WalletTransactionObject and cannot be null");
            }
            else
            {
                this.CreditAmount = creditAmount;
            }

            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for WalletTransactionObject and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }

            this.SettledAt = settledAt;
        }

        /// <summary>
        /// Gets or Sets LagoId
        /// </summary>
        [DataMember(Name="lago_id", EmitDefaultValue=true)]
        public Guid LagoId { get; set; }

        /// <summary>
        /// Gets or Sets LagoWalletId
        /// </summary>
        [DataMember(Name="lago_wallet_id", EmitDefaultValue=true)]
        public Guid LagoWalletId { get; set; }



        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmount
        /// </summary>
        [DataMember(Name="credit_amount", EmitDefaultValue=true)]
        public decimal CreditAmount { get; set; }

        /// <summary>
        /// Gets or Sets SettledAt
        /// </summary>
        [DataMember(Name="settled_at", EmitDefaultValue=false)]
        public DateTime SettledAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletTransactionObject {\n");
            sb.Append("  LagoId: ").Append(LagoId).Append("\n");
            sb.Append("  LagoWalletId: ").Append(LagoWalletId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CreditAmount: ").Append(CreditAmount).Append("\n");
            sb.Append("  SettledAt: ").Append(SettledAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletTransactionObject);
        }

        /// <summary>
        /// Returns true if WalletTransactionObject instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletTransactionObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletTransactionObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LagoId == input.LagoId ||
                    (this.LagoId != null &&
                    this.LagoId.Equals(input.LagoId))
                ) && 
                (
                    this.LagoWalletId == input.LagoWalletId ||
                    (this.LagoWalletId != null &&
                    this.LagoWalletId.Equals(input.LagoWalletId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CreditAmount == input.CreditAmount ||
                    (this.CreditAmount != null &&
                    this.CreditAmount.Equals(input.CreditAmount))
                ) && 
                (
                    this.SettledAt == input.SettledAt ||
                    (this.SettledAt != null &&
                    this.SettledAt.Equals(input.SettledAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LagoId != null)
                    hashCode = hashCode * 59 + this.LagoId.GetHashCode();
                if (this.LagoWalletId != null)
                    hashCode = hashCode * 59 + this.LagoWalletId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CreditAmount != null)
                    hashCode = hashCode * 59 + this.CreditAmount.GetHashCode();
                if (this.SettledAt != null)
                    hashCode = hashCode * 59 + this.SettledAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
