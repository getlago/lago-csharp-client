/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.20.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InvoiceObject
    /// </summary>
    [DataContract]
    public partial class InvoiceObject :  IEquatable<InvoiceObject>, IValidatableObject
    {
        /// <summary>
        /// Defines InvoiceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvoiceTypeEnum
        {
            /// <summary>
            /// Enum Subscription for value: subscription
            /// </summary>
            [EnumMember(Value = "subscription")]
            Subscription = 1,

            /// <summary>
            /// Enum Addon for value: add_on
            /// </summary>
            [EnumMember(Value = "add_on")]
            Addon = 2,

            /// <summary>
            /// Enum Credit for value: credit
            /// </summary>
            [EnumMember(Value = "credit")]
            Credit = 3

        }

        /// <summary>
        /// Gets or Sets InvoiceType
        /// </summary>
        [DataMember(Name="invoice_type", EmitDefaultValue=false)]
        public InvoiceTypeEnum? InvoiceType { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Draft for value: draft
            /// </summary>
            [EnumMember(Value = "draft")]
            Draft = 1,

            /// <summary>
            /// Enum Finalized for value: finalized
            /// </summary>
            [EnumMember(Value = "finalized")]
            Finalized = 2

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines PaymentStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentStatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 2,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 3

        }

        /// <summary>
        /// Gets or Sets PaymentStatus
        /// </summary>
        [DataMember(Name="payment_status", EmitDefaultValue=false)]
        public PaymentStatusEnum? PaymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceObject" /> class.
        /// </summary>
        /// <param name="lagoId">lagoId.</param>
        /// <param name="sequentialId">sequentialId.</param>
        /// <param name="number">number.</param>
        /// <param name="issuingDate">issuingDate.</param>
        /// <param name="invoiceType">invoiceType.</param>
        /// <param name="status">status.</param>
        /// <param name="paymentStatus">paymentStatus.</param>
        /// <param name="amountCents">amountCents.</param>
        /// <param name="amountCurrency">amountCurrency.</param>
        /// <param name="vatAmountCents">vatAmountCents.</param>
        /// <param name="vatAmountCurrency">vatAmountCurrency.</param>
        /// <param name="creditAmountCents">creditAmountCents.</param>
        /// <param name="creditAmountCurrency">creditAmountCurrency.</param>
        /// <param name="totalAmountCents">totalAmountCents.</param>
        /// <param name="totalAmountCurrency">totalAmountCurrency.</param>
        /// <param name="legacy">legacy.</param>
        /// <param name="fileUrl">fileUrl.</param>
        /// <param name="customer">customer.</param>
        /// <param name="subscriptions">subscriptions.</param>
        /// <param name="fees">fees.</param>
        /// <param name="credits">credits.</param>
        public InvoiceObject(string lagoId = default(string), int sequentialId = default(int), string number = default(string), string issuingDate = default(string), InvoiceTypeEnum? invoiceType = default(InvoiceTypeEnum?), StatusEnum? status = default(StatusEnum?), PaymentStatusEnum? paymentStatus = default(PaymentStatusEnum?), int amountCents = default(int), string amountCurrency = default(string), int vatAmountCents = default(int), string vatAmountCurrency = default(string), int creditAmountCents = default(int), string creditAmountCurrency = default(string), int totalAmountCents = default(int), string totalAmountCurrency = default(string), bool legacy = default(bool), string fileUrl = default(string), CustomerObject customer = default(CustomerObject), List<SubscriptionObject> subscriptions = default(List<SubscriptionObject>), List<FeeObject> fees = default(List<FeeObject>), List<CreditObject> credits = default(List<CreditObject>))
        {
            this.LagoId = lagoId;
            this.SequentialId = sequentialId;
            this.Number = number;
            this.IssuingDate = issuingDate;
            this.InvoiceType = invoiceType;
            this.Status = status;
            this.PaymentStatus = paymentStatus;
            this.AmountCents = amountCents;
            this.AmountCurrency = amountCurrency;
            this.VatAmountCents = vatAmountCents;
            this.VatAmountCurrency = vatAmountCurrency;
            this.CreditAmountCents = creditAmountCents;
            this.CreditAmountCurrency = creditAmountCurrency;
            this.TotalAmountCents = totalAmountCents;
            this.TotalAmountCurrency = totalAmountCurrency;
            this.Legacy = legacy;
            this.FileUrl = fileUrl;
            this.Customer = customer;
            this.Subscriptions = subscriptions;
            this.Fees = fees;
            this.Credits = credits;
        }

        /// <summary>
        /// Gets or Sets LagoId
        /// </summary>
        [DataMember(Name="lago_id", EmitDefaultValue=false)]
        public string LagoId { get; set; }

        /// <summary>
        /// Gets or Sets SequentialId
        /// </summary>
        [DataMember(Name="sequential_id", EmitDefaultValue=false)]
        public int SequentialId { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets IssuingDate
        /// </summary>
        [DataMember(Name="issuing_date", EmitDefaultValue=false)]
        public string IssuingDate { get; set; }




        /// <summary>
        /// Gets or Sets AmountCents
        /// </summary>
        [DataMember(Name="amount_cents", EmitDefaultValue=false)]
        public int AmountCents { get; set; }

        /// <summary>
        /// Gets or Sets AmountCurrency
        /// </summary>
        [DataMember(Name="amount_currency", EmitDefaultValue=false)]
        public string AmountCurrency { get; set; }

        /// <summary>
        /// Gets or Sets VatAmountCents
        /// </summary>
        [DataMember(Name="vat_amount_cents", EmitDefaultValue=false)]
        public int VatAmountCents { get; set; }

        /// <summary>
        /// Gets or Sets VatAmountCurrency
        /// </summary>
        [DataMember(Name="vat_amount_currency", EmitDefaultValue=false)]
        public string VatAmountCurrency { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmountCents
        /// </summary>
        [DataMember(Name="credit_amount_cents", EmitDefaultValue=false)]
        public int CreditAmountCents { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmountCurrency
        /// </summary>
        [DataMember(Name="credit_amount_currency", EmitDefaultValue=false)]
        public string CreditAmountCurrency { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmountCents
        /// </summary>
        [DataMember(Name="total_amount_cents", EmitDefaultValue=false)]
        public int TotalAmountCents { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmountCurrency
        /// </summary>
        [DataMember(Name="total_amount_currency", EmitDefaultValue=false)]
        public string TotalAmountCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Legacy
        /// </summary>
        [DataMember(Name="legacy", EmitDefaultValue=false)]
        public bool Legacy { get; set; }

        /// <summary>
        /// Gets or Sets FileUrl
        /// </summary>
        [DataMember(Name="file_url", EmitDefaultValue=false)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public CustomerObject Customer { get; set; }

        /// <summary>
        /// Gets or Sets Subscriptions
        /// </summary>
        [DataMember(Name="subscriptions", EmitDefaultValue=false)]
        public List<SubscriptionObject> Subscriptions { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public List<FeeObject> Fees { get; set; }

        /// <summary>
        /// Gets or Sets Credits
        /// </summary>
        [DataMember(Name="credits", EmitDefaultValue=false)]
        public List<CreditObject> Credits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceObject {\n");
            sb.Append("  LagoId: ").Append(LagoId).Append("\n");
            sb.Append("  SequentialId: ").Append(SequentialId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  IssuingDate: ").Append(IssuingDate).Append("\n");
            sb.Append("  InvoiceType: ").Append(InvoiceType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  AmountCents: ").Append(AmountCents).Append("\n");
            sb.Append("  AmountCurrency: ").Append(AmountCurrency).Append("\n");
            sb.Append("  VatAmountCents: ").Append(VatAmountCents).Append("\n");
            sb.Append("  VatAmountCurrency: ").Append(VatAmountCurrency).Append("\n");
            sb.Append("  CreditAmountCents: ").Append(CreditAmountCents).Append("\n");
            sb.Append("  CreditAmountCurrency: ").Append(CreditAmountCurrency).Append("\n");
            sb.Append("  TotalAmountCents: ").Append(TotalAmountCents).Append("\n");
            sb.Append("  TotalAmountCurrency: ").Append(TotalAmountCurrency).Append("\n");
            sb.Append("  Legacy: ").Append(Legacy).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceObject);
        }

        /// <summary>
        /// Returns true if InvoiceObject instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LagoId == input.LagoId ||
                    (this.LagoId != null &&
                    this.LagoId.Equals(input.LagoId))
                ) && 
                (
                    this.SequentialId == input.SequentialId ||
                    (this.SequentialId != null &&
                    this.SequentialId.Equals(input.SequentialId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.IssuingDate == input.IssuingDate ||
                    (this.IssuingDate != null &&
                    this.IssuingDate.Equals(input.IssuingDate))
                ) && 
                (
                    this.InvoiceType == input.InvoiceType ||
                    (this.InvoiceType != null &&
                    this.InvoiceType.Equals(input.InvoiceType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    (this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(input.PaymentStatus))
                ) && 
                (
                    this.AmountCents == input.AmountCents ||
                    (this.AmountCents != null &&
                    this.AmountCents.Equals(input.AmountCents))
                ) && 
                (
                    this.AmountCurrency == input.AmountCurrency ||
                    (this.AmountCurrency != null &&
                    this.AmountCurrency.Equals(input.AmountCurrency))
                ) && 
                (
                    this.VatAmountCents == input.VatAmountCents ||
                    (this.VatAmountCents != null &&
                    this.VatAmountCents.Equals(input.VatAmountCents))
                ) && 
                (
                    this.VatAmountCurrency == input.VatAmountCurrency ||
                    (this.VatAmountCurrency != null &&
                    this.VatAmountCurrency.Equals(input.VatAmountCurrency))
                ) && 
                (
                    this.CreditAmountCents == input.CreditAmountCents ||
                    (this.CreditAmountCents != null &&
                    this.CreditAmountCents.Equals(input.CreditAmountCents))
                ) && 
                (
                    this.CreditAmountCurrency == input.CreditAmountCurrency ||
                    (this.CreditAmountCurrency != null &&
                    this.CreditAmountCurrency.Equals(input.CreditAmountCurrency))
                ) && 
                (
                    this.TotalAmountCents == input.TotalAmountCents ||
                    (this.TotalAmountCents != null &&
                    this.TotalAmountCents.Equals(input.TotalAmountCents))
                ) && 
                (
                    this.TotalAmountCurrency == input.TotalAmountCurrency ||
                    (this.TotalAmountCurrency != null &&
                    this.TotalAmountCurrency.Equals(input.TotalAmountCurrency))
                ) && 
                (
                    this.Legacy == input.Legacy ||
                    (this.Legacy != null &&
                    this.Legacy.Equals(input.Legacy))
                ) && 
                (
                    this.FileUrl == input.FileUrl ||
                    (this.FileUrl != null &&
                    this.FileUrl.Equals(input.FileUrl))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.Subscriptions == input.Subscriptions ||
                    this.Subscriptions != null &&
                    input.Subscriptions != null &&
                    this.Subscriptions.SequenceEqual(input.Subscriptions)
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.Credits == input.Credits ||
                    this.Credits != null &&
                    input.Credits != null &&
                    this.Credits.SequenceEqual(input.Credits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LagoId != null)
                    hashCode = hashCode * 59 + this.LagoId.GetHashCode();
                if (this.SequentialId != null)
                    hashCode = hashCode * 59 + this.SequentialId.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.IssuingDate != null)
                    hashCode = hashCode * 59 + this.IssuingDate.GetHashCode();
                if (this.InvoiceType != null)
                    hashCode = hashCode * 59 + this.InvoiceType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.AmountCents != null)
                    hashCode = hashCode * 59 + this.AmountCents.GetHashCode();
                if (this.AmountCurrency != null)
                    hashCode = hashCode * 59 + this.AmountCurrency.GetHashCode();
                if (this.VatAmountCents != null)
                    hashCode = hashCode * 59 + this.VatAmountCents.GetHashCode();
                if (this.VatAmountCurrency != null)
                    hashCode = hashCode * 59 + this.VatAmountCurrency.GetHashCode();
                if (this.CreditAmountCents != null)
                    hashCode = hashCode * 59 + this.CreditAmountCents.GetHashCode();
                if (this.CreditAmountCurrency != null)
                    hashCode = hashCode * 59 + this.CreditAmountCurrency.GetHashCode();
                if (this.TotalAmountCents != null)
                    hashCode = hashCode * 59 + this.TotalAmountCents.GetHashCode();
                if (this.TotalAmountCurrency != null)
                    hashCode = hashCode * 59 + this.TotalAmountCurrency.GetHashCode();
                if (this.Legacy != null)
                    hashCode = hashCode * 59 + this.Legacy.GetHashCode();
                if (this.FileUrl != null)
                    hashCode = hashCode * 59 + this.FileUrl.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.Subscriptions != null)
                    hashCode = hashCode * 59 + this.Subscriptions.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.Credits != null)
                    hashCode = hashCode * 59 + this.Credits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
