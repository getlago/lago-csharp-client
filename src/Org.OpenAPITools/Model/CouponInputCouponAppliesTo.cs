/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CouponInputCouponAppliesTo
    /// </summary>
    [DataContract]
    public partial class CouponInputCouponAppliesTo :  IEquatable<CouponInputCouponAppliesTo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponInputCouponAppliesTo" /> class.
        /// </summary>
        /// <param name="planCodes">planCodes.</param>
        /// <param name="billableMetricCodes">billableMetricCodes.</param>
        public CouponInputCouponAppliesTo(List<string> planCodes = default(List<string>), List<string> billableMetricCodes = default(List<string>))
        {
            this.PlanCodes = planCodes;
            this.BillableMetricCodes = billableMetricCodes;
        }

        /// <summary>
        /// Gets or Sets PlanCodes
        /// </summary>
        [DataMember(Name="plan_codes", EmitDefaultValue=false)]
        public List<string> PlanCodes { get; set; }

        /// <summary>
        /// Gets or Sets BillableMetricCodes
        /// </summary>
        [DataMember(Name="billable_metric_codes", EmitDefaultValue=false)]
        public List<string> BillableMetricCodes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CouponInputCouponAppliesTo {\n");
            sb.Append("  PlanCodes: ").Append(PlanCodes).Append("\n");
            sb.Append("  BillableMetricCodes: ").Append(BillableMetricCodes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CouponInputCouponAppliesTo);
        }

        /// <summary>
        /// Returns true if CouponInputCouponAppliesTo instances are equal
        /// </summary>
        /// <param name="input">Instance of CouponInputCouponAppliesTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CouponInputCouponAppliesTo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlanCodes == input.PlanCodes ||
                    this.PlanCodes != null &&
                    input.PlanCodes != null &&
                    this.PlanCodes.SequenceEqual(input.PlanCodes)
                ) && 
                (
                    this.BillableMetricCodes == input.BillableMetricCodes ||
                    this.BillableMetricCodes != null &&
                    input.BillableMetricCodes != null &&
                    this.BillableMetricCodes.SequenceEqual(input.BillableMetricCodes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlanCodes != null)
                    hashCode = hashCode * 59 + this.PlanCodes.GetHashCode();
                if (this.BillableMetricCodes != null)
                    hashCode = hashCode * 59 + this.BillableMetricCodes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
