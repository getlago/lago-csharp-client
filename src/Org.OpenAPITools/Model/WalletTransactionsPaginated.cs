/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.36.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WalletTransactionsPaginated
    /// </summary>
    [DataContract(Name = "WalletTransactionsPaginated")]
    public partial class WalletTransactionsPaginated : IEquatable<WalletTransactionsPaginated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTransactionsPaginated" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WalletTransactionsPaginated() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTransactionsPaginated" /> class.
        /// </summary>
        /// <param name="walletTransactions">walletTransactions (required).</param>
        /// <param name="meta">meta (required).</param>
        public WalletTransactionsPaginated(List<WalletTransactionObject> walletTransactions = default(List<WalletTransactionObject>), PaginationMeta meta = default(PaginationMeta))
        {
            // to ensure "walletTransactions" is required (not null)
            if (walletTransactions == null)
            {
                throw new ArgumentNullException("walletTransactions is a required property for WalletTransactionsPaginated and cannot be null");
            }
            this.WalletTransactions = walletTransactions;
            // to ensure "meta" is required (not null)
            if (meta == null)
            {
                throw new ArgumentNullException("meta is a required property for WalletTransactionsPaginated and cannot be null");
            }
            this.Meta = meta;
        }

        /// <summary>
        /// Gets or Sets WalletTransactions
        /// </summary>
        [DataMember(Name = "wallet_transactions", IsRequired = true, EmitDefaultValue = true)]
        public List<WalletTransactionObject> WalletTransactions { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", IsRequired = true, EmitDefaultValue = true)]
        public PaginationMeta Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WalletTransactionsPaginated {\n");
            sb.Append("  WalletTransactions: ").Append(WalletTransactions).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletTransactionsPaginated);
        }

        /// <summary>
        /// Returns true if WalletTransactionsPaginated instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletTransactionsPaginated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletTransactionsPaginated input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WalletTransactions == input.WalletTransactions ||
                    this.WalletTransactions != null &&
                    input.WalletTransactions != null &&
                    this.WalletTransactions.SequenceEqual(input.WalletTransactions)
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WalletTransactions != null)
                {
                    hashCode = (hashCode * 59) + this.WalletTransactions.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
