/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SubscriptionObject
    /// </summary>
    [DataContract]
    public partial class SubscriptionObject :  IEquatable<SubscriptionObject>, IValidatableObject
    {
        /// <summary>
        /// Subscription status
        /// </summary>
        /// <value>Subscription status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 2,

            /// <summary>
            /// Enum Terminated for value: terminated
            /// </summary>
            [EnumMember(Value = "terminated")]
            Terminated = 3,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            [EnumMember(Value = "canceled")]
            Canceled = 4

        }

        /// <summary>
        /// Subscription status
        /// </summary>
        /// <value>Subscription status</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Billing time
        /// </summary>
        /// <value>Billing time</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillingTimeEnum
        {
            /// <summary>
            /// Enum Calendar for value: calendar
            /// </summary>
            [EnumMember(Value = "calendar")]
            Calendar = 1,

            /// <summary>
            /// Enum Anniversary for value: anniversary
            /// </summary>
            [EnumMember(Value = "anniversary")]
            Anniversary = 2

        }

        /// <summary>
        /// Billing time
        /// </summary>
        /// <value>Billing time</value>
        [DataMember(Name="billing_time", EmitDefaultValue=true)]
        public BillingTimeEnum BillingTime { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionObject" /> class.
        /// </summary>
        /// <param name="lagoId">lagoId (required).</param>
        /// <param name="externalId">externalId (required).</param>
        /// <param name="lagoCustomerId">lagoCustomerId (required).</param>
        /// <param name="externalCustomerId">externalCustomerId (required).</param>
        /// <param name="name">name.</param>
        /// <param name="planCode">planCode (required).</param>
        /// <param name="status">Subscription status (required).</param>
        /// <param name="billingTime">Billing time (required).</param>
        /// <param name="subscriptionAt">subscriptionAt (required).</param>
        /// <param name="startedAt">startedAt (required).</param>
        /// <param name="terminatedAt">terminatedAt.</param>
        /// <param name="canceledAt">canceledAt.</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="previousPlanCode">previousPlanCode.</param>
        /// <param name="nextPlanCode">nextPlanCode.</param>
        /// <param name="downgradePlanDate">downgradePlanDate.</param>
        public SubscriptionObject(Guid lagoId = default(Guid), string externalId = default(string), Guid lagoCustomerId = default(Guid), string externalCustomerId = default(string), string name = default(string), string planCode = default(string), StatusEnum status = default(StatusEnum), BillingTimeEnum billingTime = default(BillingTimeEnum), DateTime subscriptionAt = default(DateTime), DateTime startedAt = default(DateTime), DateTime terminatedAt = default(DateTime), DateTime canceledAt = default(DateTime), DateTime createdAt = default(DateTime), string previousPlanCode = default(string), string nextPlanCode = default(string), DateTime downgradePlanDate = default(DateTime))
        {
            // to ensure "lagoId" is required (not null)
            if (lagoId == null)
            {
                throw new InvalidDataException("lagoId is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.LagoId = lagoId;
            }

            // to ensure "externalId" is required (not null)
            if (externalId == null)
            {
                throw new InvalidDataException("externalId is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.ExternalId = externalId;
            }

            // to ensure "lagoCustomerId" is required (not null)
            if (lagoCustomerId == null)
            {
                throw new InvalidDataException("lagoCustomerId is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.LagoCustomerId = lagoCustomerId;
            }

            // to ensure "externalCustomerId" is required (not null)
            if (externalCustomerId == null)
            {
                throw new InvalidDataException("externalCustomerId is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.ExternalCustomerId = externalCustomerId;
            }

            // to ensure "planCode" is required (not null)
            if (planCode == null)
            {
                throw new InvalidDataException("planCode is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.PlanCode = planCode;
            }

            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "billingTime" is required (not null)
            if (billingTime == null)
            {
                throw new InvalidDataException("billingTime is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.BillingTime = billingTime;
            }

            // to ensure "subscriptionAt" is required (not null)
            if (subscriptionAt == null)
            {
                throw new InvalidDataException("subscriptionAt is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.SubscriptionAt = subscriptionAt;
            }

            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new InvalidDataException("startedAt is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.StartedAt = startedAt;
            }

            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for SubscriptionObject and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }

            this.Name = name;
            this.TerminatedAt = terminatedAt;
            this.CanceledAt = canceledAt;
            this.PreviousPlanCode = previousPlanCode;
            this.NextPlanCode = nextPlanCode;
            this.DowngradePlanDate = downgradePlanDate;
        }

        /// <summary>
        /// Gets or Sets LagoId
        /// </summary>
        [DataMember(Name="lago_id", EmitDefaultValue=true)]
        public Guid LagoId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name="external_id", EmitDefaultValue=true)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets LagoCustomerId
        /// </summary>
        [DataMember(Name="lago_customer_id", EmitDefaultValue=true)]
        public Guid LagoCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCustomerId
        /// </summary>
        [DataMember(Name="external_customer_id", EmitDefaultValue=true)]
        public string ExternalCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PlanCode
        /// </summary>
        [DataMember(Name="plan_code", EmitDefaultValue=true)]
        public string PlanCode { get; set; }



        /// <summary>
        /// Gets or Sets SubscriptionAt
        /// </summary>
        [DataMember(Name="subscription_at", EmitDefaultValue=true)]
        public DateTime SubscriptionAt { get; set; }

        /// <summary>
        /// Gets or Sets StartedAt
        /// </summary>
        [DataMember(Name="started_at", EmitDefaultValue=true)]
        public DateTime StartedAt { get; set; }

        /// <summary>
        /// Gets or Sets TerminatedAt
        /// </summary>
        [DataMember(Name="terminated_at", EmitDefaultValue=false)]
        public DateTime TerminatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CanceledAt
        /// </summary>
        [DataMember(Name="canceled_at", EmitDefaultValue=false)]
        public DateTime CanceledAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets PreviousPlanCode
        /// </summary>
        [DataMember(Name="previous_plan_code", EmitDefaultValue=false)]
        public string PreviousPlanCode { get; set; }

        /// <summary>
        /// Gets or Sets NextPlanCode
        /// </summary>
        [DataMember(Name="next_plan_code", EmitDefaultValue=false)]
        public string NextPlanCode { get; set; }

        /// <summary>
        /// Gets or Sets DowngradePlanDate
        /// </summary>
        [DataMember(Name="downgrade_plan_date", EmitDefaultValue=false)]
        public DateTime DowngradePlanDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionObject {\n");
            sb.Append("  LagoId: ").Append(LagoId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  LagoCustomerId: ").Append(LagoCustomerId).Append("\n");
            sb.Append("  ExternalCustomerId: ").Append(ExternalCustomerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PlanCode: ").Append(PlanCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BillingTime: ").Append(BillingTime).Append("\n");
            sb.Append("  SubscriptionAt: ").Append(SubscriptionAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  TerminatedAt: ").Append(TerminatedAt).Append("\n");
            sb.Append("  CanceledAt: ").Append(CanceledAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PreviousPlanCode: ").Append(PreviousPlanCode).Append("\n");
            sb.Append("  NextPlanCode: ").Append(NextPlanCode).Append("\n");
            sb.Append("  DowngradePlanDate: ").Append(DowngradePlanDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionObject);
        }

        /// <summary>
        /// Returns true if SubscriptionObject instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LagoId == input.LagoId ||
                    (this.LagoId != null &&
                    this.LagoId.Equals(input.LagoId))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.LagoCustomerId == input.LagoCustomerId ||
                    (this.LagoCustomerId != null &&
                    this.LagoCustomerId.Equals(input.LagoCustomerId))
                ) && 
                (
                    this.ExternalCustomerId == input.ExternalCustomerId ||
                    (this.ExternalCustomerId != null &&
                    this.ExternalCustomerId.Equals(input.ExternalCustomerId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PlanCode == input.PlanCode ||
                    (this.PlanCode != null &&
                    this.PlanCode.Equals(input.PlanCode))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.BillingTime == input.BillingTime ||
                    (this.BillingTime != null &&
                    this.BillingTime.Equals(input.BillingTime))
                ) && 
                (
                    this.SubscriptionAt == input.SubscriptionAt ||
                    (this.SubscriptionAt != null &&
                    this.SubscriptionAt.Equals(input.SubscriptionAt))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.TerminatedAt == input.TerminatedAt ||
                    (this.TerminatedAt != null &&
                    this.TerminatedAt.Equals(input.TerminatedAt))
                ) && 
                (
                    this.CanceledAt == input.CanceledAt ||
                    (this.CanceledAt != null &&
                    this.CanceledAt.Equals(input.CanceledAt))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.PreviousPlanCode == input.PreviousPlanCode ||
                    (this.PreviousPlanCode != null &&
                    this.PreviousPlanCode.Equals(input.PreviousPlanCode))
                ) && 
                (
                    this.NextPlanCode == input.NextPlanCode ||
                    (this.NextPlanCode != null &&
                    this.NextPlanCode.Equals(input.NextPlanCode))
                ) && 
                (
                    this.DowngradePlanDate == input.DowngradePlanDate ||
                    (this.DowngradePlanDate != null &&
                    this.DowngradePlanDate.Equals(input.DowngradePlanDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LagoId != null)
                    hashCode = hashCode * 59 + this.LagoId.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.LagoCustomerId != null)
                    hashCode = hashCode * 59 + this.LagoCustomerId.GetHashCode();
                if (this.ExternalCustomerId != null)
                    hashCode = hashCode * 59 + this.ExternalCustomerId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PlanCode != null)
                    hashCode = hashCode * 59 + this.PlanCode.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.BillingTime != null)
                    hashCode = hashCode * 59 + this.BillingTime.GetHashCode();
                if (this.SubscriptionAt != null)
                    hashCode = hashCode * 59 + this.SubscriptionAt.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.TerminatedAt != null)
                    hashCode = hashCode * 59 + this.TerminatedAt.GetHashCode();
                if (this.CanceledAt != null)
                    hashCode = hashCode * 59 + this.CanceledAt.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.PreviousPlanCode != null)
                    hashCode = hashCode * 59 + this.PreviousPlanCode.GetHashCode();
                if (this.NextPlanCode != null)
                    hashCode = hashCode * 59 + this.NextPlanCode.GetHashCode();
                if (this.DowngradePlanDate != null)
                    hashCode = hashCode * 59 + this.DowngradePlanDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
