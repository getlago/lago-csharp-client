/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.36.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EventEstimateFeesInputEvent
    /// </summary>
    [DataContract(Name = "EventEstimateFeesInput_event")]
    public partial class EventEstimateFeesInputEvent : IEquatable<EventEstimateFeesInputEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventEstimateFeesInputEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventEstimateFeesInputEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventEstimateFeesInputEvent" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="externalCustomerId">externalCustomerId.</param>
        /// <param name="externalSubscriptionId">externalSubscriptionId.</param>
        /// <param name="properties">properties.</param>
        public EventEstimateFeesInputEvent(string code = default(string), string externalCustomerId = default(string), string externalSubscriptionId = default(string), Object properties = default(Object))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for EventEstimateFeesInputEvent and cannot be null");
            }
            this.Code = code;
            this.ExternalCustomerId = externalCustomerId;
            this.ExternalSubscriptionId = externalSubscriptionId;
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        /// <example>code</example>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets ExternalCustomerId
        /// </summary>
        /// <example>654321</example>
        [DataMember(Name = "external_customer_id", EmitDefaultValue = false)]
        public string ExternalCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalSubscriptionId
        /// </summary>
        /// <example>123456</example>
        [DataMember(Name = "external_subscription_id", EmitDefaultValue = false)]
        public string ExternalSubscriptionId { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Object Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventEstimateFeesInputEvent {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ExternalCustomerId: ").Append(ExternalCustomerId).Append("\n");
            sb.Append("  ExternalSubscriptionId: ").Append(ExternalSubscriptionId).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventEstimateFeesInputEvent);
        }

        /// <summary>
        /// Returns true if EventEstimateFeesInputEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of EventEstimateFeesInputEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventEstimateFeesInputEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ExternalCustomerId == input.ExternalCustomerId ||
                    (this.ExternalCustomerId != null &&
                    this.ExternalCustomerId.Equals(input.ExternalCustomerId))
                ) && 
                (
                    this.ExternalSubscriptionId == input.ExternalSubscriptionId ||
                    (this.ExternalSubscriptionId != null &&
                    this.ExternalSubscriptionId.Equals(input.ExternalSubscriptionId))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.ExternalCustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalCustomerId.GetHashCode();
                }
                if (this.ExternalSubscriptionId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalSubscriptionId.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
