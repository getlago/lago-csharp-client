/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BillingConfigurationCustomer
    /// </summary>
    [DataContract]
    public partial class BillingConfigurationCustomer : Dictionary<String, Object>,  IEquatable<BillingConfigurationCustomer>, IValidatableObject
    {
        /// <summary>
        /// Payment provider type
        /// </summary>
        /// <value>Payment provider type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentProviderEnum
        {
            /// <summary>
            /// Enum Stripe for value: stripe
            /// </summary>
            [EnumMember(Value = "stripe")]
            Stripe = 1,

            /// <summary>
            /// Enum Gocardless for value: gocardless
            /// </summary>
            [EnumMember(Value = "gocardless")]
            Gocardless = 2

        }

        /// <summary>
        /// Payment provider type
        /// </summary>
        /// <value>Payment provider type</value>
        [DataMember(Name="payment_provider", EmitDefaultValue=false)]
        public PaymentProviderEnum? PaymentProvider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingConfigurationCustomer" /> class.
        /// </summary>
        /// <param name="invoiceGracePeriod">invoiceGracePeriod.</param>
        /// <param name="paymentProvider">Payment provider type.</param>
        /// <param name="providerCustomerId">providerCustomerId.</param>
        /// <param name="syncWithProvider">syncWithProvider.</param>
        /// <param name="vatRate">vatRate.</param>
        public BillingConfigurationCustomer(int invoiceGracePeriod = default(int), PaymentProviderEnum? paymentProvider = default(PaymentProviderEnum?), string providerCustomerId = default(string), bool syncWithProvider = default(bool), decimal vatRate = default(decimal)) : base()
        {
            this.InvoiceGracePeriod = invoiceGracePeriod;
            this.PaymentProvider = paymentProvider;
            this.ProviderCustomerId = providerCustomerId;
            this.SyncWithProvider = syncWithProvider;
            this.VatRate = vatRate;
        }

        /// <summary>
        /// Gets or Sets InvoiceGracePeriod
        /// </summary>
        [DataMember(Name="invoice_grace_period", EmitDefaultValue=false)]
        public int InvoiceGracePeriod { get; set; }


        /// <summary>
        /// Gets or Sets ProviderCustomerId
        /// </summary>
        [DataMember(Name="provider_customer_id", EmitDefaultValue=false)]
        public string ProviderCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets SyncWithProvider
        /// </summary>
        [DataMember(Name="sync_with_provider", EmitDefaultValue=false)]
        public bool SyncWithProvider { get; set; }

        /// <summary>
        /// Gets or Sets VatRate
        /// </summary>
        [DataMember(Name="vat_rate", EmitDefaultValue=false)]
        public decimal VatRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingConfigurationCustomer {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  InvoiceGracePeriod: ").Append(InvoiceGracePeriod).Append("\n");
            sb.Append("  PaymentProvider: ").Append(PaymentProvider).Append("\n");
            sb.Append("  ProviderCustomerId: ").Append(ProviderCustomerId).Append("\n");
            sb.Append("  SyncWithProvider: ").Append(SyncWithProvider).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingConfigurationCustomer);
        }

        /// <summary>
        /// Returns true if BillingConfigurationCustomer instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingConfigurationCustomer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingConfigurationCustomer input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.InvoiceGracePeriod == input.InvoiceGracePeriod ||
                    (this.InvoiceGracePeriod != null &&
                    this.InvoiceGracePeriod.Equals(input.InvoiceGracePeriod))
                ) && base.Equals(input) && 
                (
                    this.PaymentProvider == input.PaymentProvider ||
                    (this.PaymentProvider != null &&
                    this.PaymentProvider.Equals(input.PaymentProvider))
                ) && base.Equals(input) && 
                (
                    this.ProviderCustomerId == input.ProviderCustomerId ||
                    (this.ProviderCustomerId != null &&
                    this.ProviderCustomerId.Equals(input.ProviderCustomerId))
                ) && base.Equals(input) && 
                (
                    this.SyncWithProvider == input.SyncWithProvider ||
                    (this.SyncWithProvider != null &&
                    this.SyncWithProvider.Equals(input.SyncWithProvider))
                ) && base.Equals(input) && 
                (
                    this.VatRate == input.VatRate ||
                    (this.VatRate != null &&
                    this.VatRate.Equals(input.VatRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.InvoiceGracePeriod != null)
                    hashCode = hashCode * 59 + this.InvoiceGracePeriod.GetHashCode();
                if (this.PaymentProvider != null)
                    hashCode = hashCode * 59 + this.PaymentProvider.GetHashCode();
                if (this.ProviderCustomerId != null)
                    hashCode = hashCode * 59 + this.ProviderCustomerId.GetHashCode();
                if (this.SyncWithProvider != null)
                    hashCode = hashCode * 59 + this.SyncWithProvider.GetHashCode();
                if (this.VatRate != null)
                    hashCode = hashCode * 59 + this.VatRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
