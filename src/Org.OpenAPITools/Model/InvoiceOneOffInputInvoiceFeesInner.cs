/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InvoiceOneOffInputInvoiceFeesInner
    /// </summary>
    [DataContract]
    public partial class InvoiceOneOffInputInvoiceFeesInner :  IEquatable<InvoiceOneOffInputInvoiceFeesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceOneOffInputInvoiceFeesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceOneOffInputInvoiceFeesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceOneOffInputInvoiceFeesInner" /> class.
        /// </summary>
        /// <param name="addOnCode">addOnCode (required).</param>
        /// <param name="unitAmountCents">unitAmountCents.</param>
        /// <param name="units">units.</param>
        /// <param name="description">description.</param>
        public InvoiceOneOffInputInvoiceFeesInner(string addOnCode = default(string), int unitAmountCents = default(int), decimal units = default(decimal), string description = default(string))
        {
            // to ensure "addOnCode" is required (not null)
            if (addOnCode == null)
            {
                throw new InvalidDataException("addOnCode is a required property for InvoiceOneOffInputInvoiceFeesInner and cannot be null");
            }
            else
            {
                this.AddOnCode = addOnCode;
            }

            this.UnitAmountCents = unitAmountCents;
            this.Units = units;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets AddOnCode
        /// </summary>
        [DataMember(Name="add_on_code", EmitDefaultValue=true)]
        public string AddOnCode { get; set; }

        /// <summary>
        /// Gets or Sets UnitAmountCents
        /// </summary>
        [DataMember(Name="unit_amount_cents", EmitDefaultValue=false)]
        public int UnitAmountCents { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public decimal Units { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceOneOffInputInvoiceFeesInner {\n");
            sb.Append("  AddOnCode: ").Append(AddOnCode).Append("\n");
            sb.Append("  UnitAmountCents: ").Append(UnitAmountCents).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceOneOffInputInvoiceFeesInner);
        }

        /// <summary>
        /// Returns true if InvoiceOneOffInputInvoiceFeesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceOneOffInputInvoiceFeesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceOneOffInputInvoiceFeesInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddOnCode == input.AddOnCode ||
                    (this.AddOnCode != null &&
                    this.AddOnCode.Equals(input.AddOnCode))
                ) && 
                (
                    this.UnitAmountCents == input.UnitAmountCents ||
                    (this.UnitAmountCents != null &&
                    this.UnitAmountCents.Equals(input.UnitAmountCents))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddOnCode != null)
                    hashCode = hashCode * 59 + this.AddOnCode.GetHashCode();
                if (this.UnitAmountCents != null)
                    hashCode = hashCode * 59 + this.UnitAmountCents.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
