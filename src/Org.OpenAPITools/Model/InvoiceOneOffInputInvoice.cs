/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InvoiceOneOffInputInvoice
    /// </summary>
    [DataContract]
    public partial class InvoiceOneOffInputInvoice :  IEquatable<InvoiceOneOffInputInvoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceOneOffInputInvoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceOneOffInputInvoice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceOneOffInputInvoice" /> class.
        /// </summary>
        /// <param name="externalCustomerId">externalCustomerId (required).</param>
        /// <param name="currency">currency.</param>
        /// <param name="fees">fees.</param>
        public InvoiceOneOffInputInvoice(string externalCustomerId = default(string), string currency = default(string), List<InvoiceOneOffInputInvoiceFeesInner> fees = default(List<InvoiceOneOffInputInvoiceFeesInner>))
        {
            // to ensure "externalCustomerId" is required (not null)
            if (externalCustomerId == null)
            {
                throw new InvalidDataException("externalCustomerId is a required property for InvoiceOneOffInputInvoice and cannot be null");
            }
            else
            {
                this.ExternalCustomerId = externalCustomerId;
            }

            this.Currency = currency;
            this.Fees = fees;
        }

        /// <summary>
        /// Gets or Sets ExternalCustomerId
        /// </summary>
        [DataMember(Name="external_customer_id", EmitDefaultValue=true)]
        public string ExternalCustomerId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public List<InvoiceOneOffInputInvoiceFeesInner> Fees { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceOneOffInputInvoice {\n");
            sb.Append("  ExternalCustomerId: ").Append(ExternalCustomerId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceOneOffInputInvoice);
        }

        /// <summary>
        /// Returns true if InvoiceOneOffInputInvoice instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceOneOffInputInvoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceOneOffInputInvoice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExternalCustomerId == input.ExternalCustomerId ||
                    (this.ExternalCustomerId != null &&
                    this.ExternalCustomerId.Equals(input.ExternalCustomerId))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExternalCustomerId != null)
                    hashCode = hashCode * 59 + this.ExternalCustomerId.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
