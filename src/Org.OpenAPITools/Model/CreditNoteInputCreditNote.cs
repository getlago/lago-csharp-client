/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreditNoteInputCreditNote
    /// </summary>
    [DataContract]
    public partial class CreditNoteInputCreditNote :  IEquatable<CreditNoteInputCreditNote>, IValidatableObject
    {
        /// <summary>
        /// Reason
        /// </summary>
        /// <value>Reason</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum Duplicatedcharge for value: duplicated_charge
            /// </summary>
            [EnumMember(Value = "duplicated_charge")]
            Duplicatedcharge = 1,

            /// <summary>
            /// Enum Productunsatisfactory for value: product_unsatisfactory
            /// </summary>
            [EnumMember(Value = "product_unsatisfactory")]
            Productunsatisfactory = 2,

            /// <summary>
            /// Enum Orderchange for value: order_change
            /// </summary>
            [EnumMember(Value = "order_change")]
            Orderchange = 3,

            /// <summary>
            /// Enum Ordercancellation for value: order_cancellation
            /// </summary>
            [EnumMember(Value = "order_cancellation")]
            Ordercancellation = 4,

            /// <summary>
            /// Enum Fraudulentcharge for value: fraudulent_charge
            /// </summary>
            [EnumMember(Value = "fraudulent_charge")]
            Fraudulentcharge = 5,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 6

        }

        /// <summary>
        /// Reason
        /// </summary>
        /// <value>Reason</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNoteInputCreditNote" /> class.
        /// </summary>
        /// <param name="invoiceId">invoiceId.</param>
        /// <param name="reason">Reason.</param>
        /// <param name="description">description.</param>
        /// <param name="creditAmountCents">creditAmountCents.</param>
        /// <param name="refundAmountCents">refundAmountCents.</param>
        /// <param name="items">items.</param>
        public CreditNoteInputCreditNote(string invoiceId = default(string), ReasonEnum? reason = default(ReasonEnum?), string description = default(string), int creditAmountCents = default(int), int refundAmountCents = default(int), List<CreditNoteInputCreditNoteItemsInner> items = default(List<CreditNoteInputCreditNoteItemsInner>))
        {
            this.InvoiceId = invoiceId;
            this.Reason = reason;
            this.Description = description;
            this.CreditAmountCents = creditAmountCents;
            this.RefundAmountCents = refundAmountCents;
            this.Items = items;
        }

        /// <summary>
        /// Gets or Sets InvoiceId
        /// </summary>
        [DataMember(Name="invoice_id", EmitDefaultValue=false)]
        public string InvoiceId { get; set; }


        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmountCents
        /// </summary>
        [DataMember(Name="credit_amount_cents", EmitDefaultValue=false)]
        public int CreditAmountCents { get; set; }

        /// <summary>
        /// Gets or Sets RefundAmountCents
        /// </summary>
        [DataMember(Name="refund_amount_cents", EmitDefaultValue=false)]
        public int RefundAmountCents { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<CreditNoteInputCreditNoteItemsInner> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditNoteInputCreditNote {\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreditAmountCents: ").Append(CreditAmountCents).Append("\n");
            sb.Append("  RefundAmountCents: ").Append(RefundAmountCents).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditNoteInputCreditNote);
        }

        /// <summary>
        /// Returns true if CreditNoteInputCreditNote instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditNoteInputCreditNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditNoteInputCreditNote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreditAmountCents == input.CreditAmountCents ||
                    (this.CreditAmountCents != null &&
                    this.CreditAmountCents.Equals(input.CreditAmountCents))
                ) && 
                (
                    this.RefundAmountCents == input.RefundAmountCents ||
                    (this.RefundAmountCents != null &&
                    this.RefundAmountCents.Equals(input.RefundAmountCents))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceId != null)
                    hashCode = hashCode * 59 + this.InvoiceId.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.CreditAmountCents != null)
                    hashCode = hashCode * 59 + this.CreditAmountCents.GetHashCode();
                if (this.RefundAmountCents != null)
                    hashCode = hashCode * 59 + this.RefundAmountCents.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
