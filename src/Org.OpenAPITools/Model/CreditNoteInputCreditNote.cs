/*
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.36.0-beta
 * Contact: tech@getlago.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreditNoteInputCreditNote
    /// </summary>
    [DataContract(Name = "CreditNoteInput_credit_note")]
    public partial class CreditNoteInputCreditNote : IEquatable<CreditNoteInputCreditNote>, IValidatableObject
    {
        /// <summary>
        /// Reason
        /// </summary>
        /// <value>Reason</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum DuplicatedCharge for value: duplicated_charge
            /// </summary>
            [EnumMember(Value = "duplicated_charge")]
            DuplicatedCharge = 1,

            /// <summary>
            /// Enum ProductUnsatisfactory for value: product_unsatisfactory
            /// </summary>
            [EnumMember(Value = "product_unsatisfactory")]
            ProductUnsatisfactory = 2,

            /// <summary>
            /// Enum OrderChange for value: order_change
            /// </summary>
            [EnumMember(Value = "order_change")]
            OrderChange = 3,

            /// <summary>
            /// Enum OrderCancellation for value: order_cancellation
            /// </summary>
            [EnumMember(Value = "order_cancellation")]
            OrderCancellation = 4,

            /// <summary>
            /// Enum FraudulentCharge for value: fraudulent_charge
            /// </summary>
            [EnumMember(Value = "fraudulent_charge")]
            FraudulentCharge = 5,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 6
        }


        /// <summary>
        /// Reason
        /// </summary>
        /// <value>Reason</value>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public ReasonEnum Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNoteInputCreditNote" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditNoteInputCreditNote() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditNoteInputCreditNote" /> class.
        /// </summary>
        /// <param name="invoiceId">invoiceId (required).</param>
        /// <param name="reason">Reason (required).</param>
        /// <param name="description">description.</param>
        /// <param name="creditAmountCents">creditAmountCents (required).</param>
        /// <param name="refundAmountCents">refundAmountCents (required).</param>
        /// <param name="items">items (required).</param>
        public CreditNoteInputCreditNote(Guid invoiceId = default(Guid), ReasonEnum reason = default(ReasonEnum), string description = default(string), int creditAmountCents = default(int), int refundAmountCents = default(int), List<CreditNoteInputCreditNoteItemsInner> items = default(List<CreditNoteInputCreditNoteItemsInner>))
        {
            this.InvoiceId = invoiceId;
            this.Reason = reason;
            this.CreditAmountCents = creditAmountCents;
            this.RefundAmountCents = refundAmountCents;
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new ArgumentNullException("items is a required property for CreditNoteInputCreditNote and cannot be null");
            }
            this.Items = items;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets InvoiceId
        /// </summary>
        /// <example>1a901a90-1a90-1a90-1a90-1a901a901a90</example>
        [DataMember(Name = "invoice_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid InvoiceId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /// <example>description</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CreditAmountCents
        /// </summary>
        /// <example>20</example>
        [DataMember(Name = "credit_amount_cents", IsRequired = true, EmitDefaultValue = true)]
        public int CreditAmountCents { get; set; }

        /// <summary>
        /// Gets or Sets RefundAmountCents
        /// </summary>
        /// <example>20</example>
        [DataMember(Name = "refund_amount_cents", IsRequired = true, EmitDefaultValue = true)]
        public int RefundAmountCents { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", IsRequired = true, EmitDefaultValue = true)]
        public List<CreditNoteInputCreditNoteItemsInner> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreditNoteInputCreditNote {\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreditAmountCents: ").Append(CreditAmountCents).Append("\n");
            sb.Append("  RefundAmountCents: ").Append(RefundAmountCents).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditNoteInputCreditNote);
        }

        /// <summary>
        /// Returns true if CreditNoteInputCreditNote instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditNoteInputCreditNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditNoteInputCreditNote input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.Reason == input.Reason ||
                    this.Reason.Equals(input.Reason)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.CreditAmountCents == input.CreditAmountCents ||
                    this.CreditAmountCents.Equals(input.CreditAmountCents)
                ) && 
                (
                    this.RefundAmountCents == input.RefundAmountCents ||
                    this.RefundAmountCents.Equals(input.RefundAmountCents)
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvoiceId != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreditAmountCents.GetHashCode();
                hashCode = (hashCode * 59) + this.RefundAmountCents.GetHashCode();
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
